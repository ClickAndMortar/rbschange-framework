/**
 * Do not edit this file as it will be re-created when compiling documents.
 * Edit <{$model->getDocumentClassName()}> file instead.
 * @package modules.<{$model->getModuleName()}>.persistentdocument
 */
class <{$model->getDocumentClassName()}>base extends <{$model->getBaseClassName()}>
{
<{foreach from=$model->getPrivateClassMember() item=property}>
	private $m_<{$property->getName()}>;
<{/foreach}>

	private static $__serializedPropertyNames;

	public function __sleep()
	{
		return $this->__getSerializedPropertyNames();
	}

	protected function __getSerializedPropertyNames()
	{
		if (self::$__serializedPropertyNames === null)
		{
			self::$__serializedPropertyNames = array_merge(parent::__getSerializedPropertyNames(), array(<{foreach from=$model->getPrivateClassMember() item=property}>"\0<{$model->getDocumentClassName()}>base\0m_<{$property->getName()}>",<{/foreach}>));
		}
		return self::$__serializedPropertyNames;
	}

<{if (!$model->inject()) }>  
   
	/**
	 * @return <{$model->getDocumentClassName()}>
	 */
	public static function getNewInstance()
	{
		return <{$model->getServiceClassName()}>::getInstance()->getNewDocumentInstance();
	}
	
	/**
	 * @return <{$model->getDocumentClassName()}>
	 */
	public static function getInstanceById($documentId)
	{
		return <{$model->getServiceClassName()}>::getInstance()->getDocumentInstance($documentId, '<{$model->getName()}>');
	}
		
	/**
	 * @return <{$model->getDocumentClassName()}>model
	 */
	public function getPersistentModel()
	{
		return f_persistentdocument_PersistentDocumentModel::getInstance('<{$model->getModuleName()}>', '<{$model->getDocumentName()}>');
	}

	/**
	 * @return String constant '<{$model->getName()}>'
	 */
	public function getDocumentModelName()
	{
		return '<{$model->getName()}>';
	}
	
	/**
	 * @return <{$model->getServiceClassName()}>
	 */
	public function getDocumentService()
	{
		return <{$model->getServiceClassName()}>::getInstance();
	}
<{/if}>

	/**
	 * @internal For framework internal usage only
	 *
	 * @param integer $id
	 * @param I18nInfo $i18nInfo
	 * @param integer $treeId
	 */
	public function __construct($id = 0, $i18nInfo = null, $treeId = null)
	{
		parent::__construct($id, $i18nInfo, $treeId);
	}

    public function __destruct()
    {
<{foreach from=$model->getPrivateClassMember() item=property}>
<{if $property->isDocument()}>
		$this->m_<{$property->getName()}> = null;
<{/if}>
<{/foreach}>
        parent::__destruct();
    }
    
	/**
	 * @return void
	 */
	protected function setDefaultValues()
	{
<{$model->getPhpDefaultValues()}>
	}

	/**
	 * @return Boolean
	 */
	public function isLocalized()
	{
		return <{$model->escapeBoolean($model->isLocalized())}>;
	}
<{if $model->hasClassMembers()}>

	/**
	 * @internal For framework internal usage only
	 * @param Boolean $loadAll if all data must be retrieved (by default)
	 * @return array<String, mixed>
	 */
	public function getDocumentProperties($loadAll = true)
	{
		$propertyBag = parent::getDocumentProperties($loadAll);
<{if $model->getInitSerializedproperties()}>
		$this->serializeS18s();
<{/if}>
<{if $model->isLocalized()}>
		$voObject = $this->getI18nVoObject();
<{foreach from=$model->getClassI18nMember() item=property}>
		$propertyBag['<{$property->getName()}>'] = $voObject->get<{$property->getPhpName()}>();
<{/foreach}>
<{/if}>
<{foreach from=$model->getPrivateClassMember() item=property}>
<{if $property->isArray()}>
        if ($loadAll) {$this->checkLoaded<{$property->getPhpName()}>();}
<{/if}>
		$propertyBag['<{$property->getName()}>'] = $this->m_<{$property->getName()}>;
<{/foreach}>
		return $propertyBag;
	}

	/**
	 * @internal For framework internal usage only
	 * @param array<String, mixed> $lang
	 * @return void
	 */
	public function setDocumentProperties($propertyBag)
	{
		parent::setDocumentProperties($propertyBag);
		foreach ($propertyBag as $propertyName => $propertyValue)
		{
			switch ($propertyName)
			{
<{foreach from=$model->getPrivateClassMember() item=property}>
<{if $property->getType() == "Boolean"}>
                case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = (bool)$propertyValue; break;
<{elseif $property->getType() == "Integer"}>
                case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = (null === $propertyValue) ? null : intval($propertyValue); break;
<{elseif $property->getType() == "DocumentId"}>
                case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = (null === $propertyValue) ? null : intval($propertyValue); break;
<{elseif $property->getType() == "Double"}>
                case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = (null === $propertyValue) ? null : floatval($propertyValue); break;
<{elseif $property->getType() == "Decimal"}>
                case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = (null === $propertyValue) ? null : floatval($propertyValue); break;
<{else}>
				case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = $propertyValue; break;
<{/if}>
<{/foreach}>
			}
		}
	}
<{/if}>
<{if $model->hasValidatesProperties()}>

	/**
	 * @return boolean
	 */
	public function isValid()
	{
		parent::isValid();
<{foreach from=$model->getValidatesProperties() item=property}>
		$this->is<{$property->getPhpName()}>Valid();
<{/foreach}>
		return !$this->hasPropertiesErrors();
	}
<{foreach from=$model->getValidatesProperties() item=property}>

<{$property->phpPropertyValidationMethod()}>
<{/foreach}>
<{/if}>
<{foreach from=$model->getScalarClassMember() item=property}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>()
	{
		$this->checkLoaded();
<{if $property->isLocalized()}>
		return $this->getI18nObject()->get<{$property->getPhpName()}>();
<{else}>
		return $this->m_<{$property->getName()}>;
<{/if}>
	}
<{if $property->isLocalized()}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getVo<{$property->getPhpName()}>()
	{
		$this->checkLoaded();
		return $this->getI18nVoObject()->get<{$property->getPhpName()}>();
	}

	/**
	 * @param string $lang
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>ForLang($lang)
	{
		$this->checkLoaded();
		return $this->getI18nObject($lang)->get<{$property->getPhpName()}>();
	}	
<{/if}>	
<{if $property->getPreserveOldValue()}>

	/**
	 * @return <{$property->getCommentaryType()}> or null
	 */
	public function get<{$property->getPhpName()}>OldValue()
	{
<{if $property->isLocalized()}>
		return $this->getOldValue('<{$property->getName()}>', $this->getI18nObject()->getLang());
<{else}>
		return $this->getOldValue('<{$property->getName()}>');
<{/if}>
	}
<{/if}>

	/**
	 * @param <{$property->getCommentaryType()}> $val
	 */
	public function set<{$property->getPhpName()}>($val)
	{
		$this->checkLoaded();
<{if $property->getName() == "s18s"}>
	$this->m_s18sArray = null;
<{/if}>
		if ($this->set<{$property->getPhpName()}>Internal($val))
		{
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}
	
	/**
	 * @param <{$property->getCommentaryType()}> $val
	 * @return boolean true if modified
	 */
	protected function set<{$property->getPhpName()}>Internal($val)
	{	
<{if $property->getType() == "DateTime"}>
		if ($val instanceof date_Calendar)
		{
			$val = date_Formatter::format($val, date_Formatter::SQL_DATE_FORMAT);
		}
		else if (is_long($val))
		{
			$val = date(date_Formatter::SQL_DATE_FORMAT, $val);
		}
<{elseif $property->getType() == "Boolean"}>
		$val = (bool) $val;
<{elseif $property->getType() == "Integer"}>
		$val = (null === $val) ? null : intval($val);
<{elseif $property->getType() == "Double" || $property->getType() == "Decimal"}>
		$val = (null === $val) ? null : floatval($val);
<{elseif $property->getType() == "JSON"}>
		$val = (null === $val || is_string($val)) ? $val : JsonService::getInstance()->encode($val);
<{elseif $property->getType() == "Object"}>
		$val = (null === $val || is_string($val)) ? $val : serialize($val);
<{elseif $property->getType() == "DocumentId"}>
		$val = ($val instanceof f_persistentdocument_PersistentDocument) ? $val->getId() : intval($val);
		if ($val < 0) {Framework::error(__METHOD__ . ' Invalid documentId');}
		if ($val <= 0) {$val = null;}
<{else}>
		$val = (null === $val) ? null : strval($val);
<{/if}>
<{if $property->isLocalized()}>
<{if $property->getPreserveOldValue()}>
		$i18nObject = $this->getI18nObject();
		$result = $i18nObject->set<{$property->getName()}>($val);
		if ($result)
		{
			$this->setOldValue('<{$property->getName()}>', $i18nObject->get<{$property->getPhpName()}>OldValue(), $i18nObject->getLang());
		}
		return $result;
<{else}>
		return $this->getI18nObject()->set<{$property->getName()}>($val);
<{/if}>
<{else}>
<{if $property->getType() == "Double" || $property->getType() == "Decimal"}>
		$modified = false;
		if ($this->m_<{$property->getName()}> === null || $val === null)
		{
			$modified = ($this->m_<{$property->getName()}> !== $val);
		}
		else
		{
			$modified = (abs($this->m_<{$property->getName()}> - $val) > 0.0001);
		}
<{else}>
		$modified = $this->m_<{$property->getName()}> !== $val;
<{/if}>
		if ($modified)
		{
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
<{/if}>
			$this->m_<{$property->getName()}> = $val;
			return true;
		}
		return false;
<{/if}>
	}
<{if $property->getType() == "DateTime"}>

	/**
	 * @param <{$property->getCommentaryType()}> $val
	 * @return void
	 */
	public function setUI<{$property->getPhpName()}>($val)
	{
		$this->set<{$property->getPhpName()}>(date_Converter::convertDateToGMT($val));
	}
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getUI<{$property->getPhpName()}>()
	{
		return date_Converter::convertDateToLocal($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == 'XHTMLFragment'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::renderHtmlFragment($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == 'LongString' || $property->getType() == 'String'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::textToHtml($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == "BBCode"}>

	/**
	 * @param <{$property->getCommentaryType()}> $val
	 * @return void
	 */
	public function set<{$property->getPhpName()}>AsBBCode($val)
	{
		$parser = new website_BBCodeParser();
		$this->set<{$property->getPhpName()}>($parser->convertBBCodeToXml($val, $parser->getModuleProfile('<{$model->getModuleName()}>')));
	}
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsBBCode()
	{
		$parser = new website_BBCodeParser();
		return $parser->convertXmlToBBCode($this->get<{$property->getPhpName()}>());
	}	
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		$parser = new website_BBCodeParser();
		return $parser->convertXmlToHtml($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == "JSON"}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getDecoded<{$property->getPhpName()}>()
	{
		$val = $this->get<{$property->getPhpName()}>();
		return $val === null ? $val : JsonService::getInstance()->decode($val);
	}	
<{/if}>
<{if $property->getType() == "Object"}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getDecoded<{$property->getPhpName()}>()
	{
		$val = $this->get<{$property->getPhpName()}>();
		return $val === null ? $val : unserialize($val);
	}
<{/if}>
<{if $property->getType() == "DocumentId"}>

	/**
	 * @return <{$property->getCommentaryDocumentType()}>|NULL
	 */
	public function get<{$property->getPhpName()}>Instance()
	{
		return DocumentHelper::getDocumentInstanceIfExists($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getFromList()}>

	/**
	 * @return string
	 */
	public function get<{$property->getPhpName()}>Label()
	{
		$list = list_ListService::getInstance()->getByListId('<{$property->getFromList()}>');
		if ($list === null)
		{
			return null;
		}
		$listItem = $list->getItemByValue($this->get<{$property->getPhpName()}>());
		if ($listItem === null)
		{
			return null;
		}
		return $listItem->getLabel();
	}
	
	/**
	 * @return String
	 */
	public function get<{$property->getPhpName()}>LabelAsHtml()
	{
		$label = $this->get<{$property->getPhpName()}>Label();
		return $label ? f_util_HtmlUtils::textToHtml($label) : null;
	}
<{/if}>
<{/foreach}>
<{foreach from=$model->getDocumentClassMember() item=property}>
<{if !$property->isArray()}>
	/**
	 * @param <{$property->getCommentaryType()}> $newValue
	 */
	public function set<{$property->getPhpName()}>($newValue)
	{
		$this->checkLoaded();
		$newId = ($newValue instanceof f_persistentdocument_PersistentDocument) ? $this->getProvider()->getCachedDocumentId($newValue) : null;
		if ($this->m_<{$property->getName()}> != $newId)
		{
		<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
		<{/if}>
			$this->m_<{$property->getName()}> = $newId;
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}

	/**
	 * @return integer
	 */
	public function get<{$property->getPhpName()}>Id()
	{
		$this->checkLoaded();
		return $this->m_<{$property->getName()}>;
	}
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>()
	{
		$this->checkLoaded();
		return ($this->m_<{$property->getName()}>) ? $this->getProvider()->getCachedDocumentById($this->m_<{$property->getName()}>) : null;
	}

<{if $property->getPreserveOldValue()}>

	/**
	 * @return integer or null
	 */
	public function get<{$property->getPhpName()}>OldValueId()
	{
		return $this->getOldValue('<{$property->getName()}>');
	}
<{/if}>
<{else}>
	private function checkLoaded<{$property->getPhpName()}>()
	{
		$this->checkLoaded();
		if (!is_array($this->m_<{$property->getName()}>))
		{
			if ($this->getDocumentPersistentState() != self::PERSISTENTSTATE_NEW)
			{
				$this->m_<{$property->getName()}> = $this->getProvider()->loadRelations($this, '<{$property->getName()}>');
			}
			else
			{
				$this->m_<{$property->getName()}> = array();
			}
		}
	}

	/**
	 * @param integer $index
	 * @param <{$property->getCommentaryType()}> $newValue Can't not be null
	 */
	public function set<{$property->getPhpName()}>($index, $newValue)
	{
		if ($newValue instanceof f_persistentdocument_PersistentDocument)
		{
			$newId = $this->getProvider()->getCachedDocumentId($newValue); 
			$index = intval($index);
			$this->checkLoaded<{$property->getPhpName()}>();
			if (!in_array($newId, $this->m_<{$property->getName()}>))
			{
<{if $property->getPreserveOldValue()}>
				$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
<{/if}>
				if ($index < 0 || $index > count($this->m_<{$property->getName()}>)) 
				{
					$index = count($this->m_<{$property->getName()}>);
				}
				$this->m_<{$property->getName()}>[$index] = $newId;
				$this->propertyUpdated('<{$property->getName()}>');
			}
		}
		else
		{
			throw new Exception(__METHOD__.": document can not be null");
		}
	}

	/**
	 * @param <{$property->getCommentaryType()}>[] $newValueArray Can't not be null
	 */
	public function set<{$property->getPhpName()}>Array($newValueArray)
	{
		if (is_array($newValueArray))
		{
			$this->checkLoaded<{$property->getPhpName()}>();
			$newValueIds = array(); $pp = $this->getProvider();
			array_walk($newValueArray, function ($newValue, $index) use (&$newValueIds, $pp) {
				$newValueIds[] = $pp->getCachedDocumentId($newValue);
			});
			if ($this->m_<{$property->getName()}> != $newValueIds)
			{
<{if $property->getPreserveOldValue()}>
				$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
<{/if}>
				$this->m_<{$property->getName()}> = $newValueIds;
				$this->propertyUpdated('<{$property->getName()}>');
			}
		}
		else
		{
			throw new Exception("Invalid type of document array");
		}
	}

	/**
	 * @param <{$property->getCommentaryType()}> $newValue  Can't not be null
	 */
	public function add<{$property->getPhpName()}>($newValue)
	{
		if ($newValue instanceof f_persistentdocument_PersistentDocument)
		{ 
			$newId = $this->getProvider()->getCachedDocumentId($newValue);
			$this->checkLoaded<{$property->getPhpName()}>();
			if (!in_array($newId, $this->m_<{$property->getName()}>))
			{	
<{if $property->getPreserveOldValue()}>
				$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
<{/if}>
				$this->m_<{$property->getName()}>[] = $newId;
				$this->propertyUpdated('<{$property->getName()}>');
			}
		}
		else
		{
			throw new Exception(__METHOD__.": document can not be null");
		}
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function remove<{$property->getPhpName()}>($value)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($value instanceof f_persistentdocument_PersistentDocument)
		{
			$valueId = $value->getId();
			$index = array_search($valueId, $this->m_<{$property->getName()}>);
			if ($index !== false)
			{
<{if $property->getPreserveOldValue()}>
				$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
<{/if}>
				unset($this->m_<{$property->getName()}>[$index]);
				$this->propertyUpdated('<{$property->getName()}>');
			}
		}
	}

	/**
	 * @param integer $index
	 */
	public function remove<{$property->getPhpName()}>ByIndex($index)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if (isset($this->m_<{$property->getName()}>[$index]))
		{
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
<{/if}>
			unset($this->m_<{$property->getName()}>[$index]);
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}

	public function removeAll<{$property->getPhpName()}>()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if (count($this->m_<{$property->getName()}>))
		{
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
<{/if}>
			$this->m_<{$property->getName()}> = array();
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}

	/**
	 * @param integer $index
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>($index)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return isset($this->m_<{$property->getName()}>[$index]) ?  $this->getProvider()->getCachedDocumentById($this->m_<{$property->getName()}>[$index]) : null;
	}
	
	/**
	 * @return integer[]
	 */
	public function get<{$property->getPhpName()}>Ids()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>;
	}

	/**
	 * @return <{$property->getCommentaryType()}>[]
	 */
	public function get<{$property->getPhpName()}>Array()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		$documents = array(); $pp = $this->getProvider();
		array_walk($this->m_<{$property->getName()}>, function ($documentId, $index) use (&$documents, $pp) {
			$documents[] = $pp->getCachedDocumentById($documentId);
		});
		return $documents;
	}

	/**
	 * @return <{$property->getCommentaryType()}>[]
	 */
	public function getPublished<{$property->getPhpName()}>Array()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		$documents = array(); $pp = $this->getProvider();
		array_walk($this->m_<{$property->getName()}>, function ($documentId, $index) use (&$documents, $pp) {
			$document = $pp->getCachedDocumentById($documentId);
			if ($document->isPublished()) {$documents[] = $document;}
		});
		return $documents;
	}

<{if $property->getPreserveOldValue()}>

	/**
	 * @return integer[]
	 */
	public function get<{$property->getPhpName()}>OldValueIds()
	{
		$result = $this->getOldValue('<{$property->getName()}>');
		if (is_array($result))
		{
			return $result;
		}
		return array();
	}
<{/if}>

	/**
	 * @return integer
	 */
	public function get<{$property->getPhpName()}>Count()
	{
		$this->checkLoaded();
		if (is_array($this->m_<{$property->getName()}>))
		{
			return count($this->m_<{$property->getName()}>);
		}
		else
		{
			return intval($this->m_<{$property->getName()}>);
		}
	}

	/**
	 * @return integer
	 */
	public function getPublished<{$property->getPhpName()}>Count()
	{
		return count($this->getPublished<{$property->getPhpName()}>Array());
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 * @return integer
	 */
	public function getIndexof<{$property->getPhpName()}>($value)
	{
		if ($value instanceof f_persistentdocument_PersistentDocument) 
		{
			$this->checkLoaded<{$property->getPhpName()}>();
			$valueId = $this->getProvider()->getCachedDocumentId($value);
			$index = array_search($valueId, $this->m_<{$property->getName()}>);
			return $index !== false ? $index : -1;
		}
		throw new Exception(__METHOD__.": document can not be null");
	}
<{/if}>
<{/foreach}>
<{if $model->getInitSerializedproperties()}>

	private $m_s18sArray;
	
	protected function serializeS18s()
	{
		if ($this->m_s18sArray !== null)
		{
			$this->setS18s(serialize($this->m_s18sArray));
			$this->m_s18sArray = null;
		}
	}
	
	protected function unserializeS18s()
	{
		$string = $this->getS18s();
		if ($string === null)
		{
			$this->m_s18sArray = array();
		}
		else
		{
			$this->m_s18sArray = unserialize($string);
		}
	}
	
	protected function getS18sProperty($name)
	{
		if ($this->m_s18sArray === null) {$this->unserializeS18s();}
		if (isset($this->m_s18sArray[$name]))
		{
			return $this->m_s18sArray[$name];
		}
		return null;
	}
	
	protected function setS18sProperty($name, $value)
	{
		if ($this->m_s18sArray === null) {$this->unserializeS18s();}
		$this->m_s18sArray[$name] = $value;
		$this->propertyUpdated('s18s');
	}
<{/if}>
<{foreach from=$model->getSerializedClassMember() item=property}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>()
	{
<{if $property->isLocalized()}>
		return $this->getI18nObject()->getS18sProperty('<{$property->getName()}>');
<{else}>
		return $this->getS18sProperty('<{$property->getName()}>');
<{/if}>
	}
<{if $property->isLocalized()}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getVo<{$property->getPhpName()}>()
	{
		return $this->getI18nVoObject()->getS18sProperty('<{$property->getName()}>');
	}

	/**
	 * @param string $lang
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>ForLang($lang)
	{
		return $this->getI18nObject($lang)->getS18sProperty('<{$property->getName()}>');
	}	
<{/if}>

	/**
	 * @param <{$property->getCommentaryType()}> $val
	 */
	public function set<{$property->getPhpName()}>($val)
	{
		$this->checkLoaded();
<{if $property->getType() == "DateTime"}>
		if ($val instanceof date_Calendar)
		{
			$val = date_Formatter::format($val, date_Formatter::SQL_DATE_FORMAT);
		}
		else if (is_long($val))
		{
			$val = date(date_Formatter::SQL_DATE_FORMAT, $val);
		}
<{elseif $property->getType() == "Boolean"}>
		$val = (bool) $val;
<{elseif $property->getType() == "Integer"}>
		$val = (null === $val) ? null : intval($val);
<{elseif $property->getType() == "Double" || $property->getType() == "Decimal"}>
		$val = (null === $val) ? null : floatval($val);
<{elseif $property->getType() == "JSON"}>
		$val = (null === $val || is_string($val)) ? $val : JsonService::getInstance()->encode($val);
<{elseif $property->getType() == "Object"}>
		$val = (null === $val || is_string($val)) ? $val : serialize($val);
<{elseif $property->getType() == "DocumentId"}>
		$val = ($val instanceof f_persistentdocument_PersistentDocument) ? $val->getId() : intval($val);
		if ($val < 0) {Framework::error(__METHOD__ . ' Invalid documentId');}
		if ($val <= 0) {$val = null;}
<{else}>
		$val = (null === $val) ? null : strval($val);
<{/if}>
<{if $property->isLocalized()}>
		$this->getI18nObject()->setS18sProperty('<{$property->getName()}>', $val);
		$this->propertyUpdated('s18s');
<{else}>
		$this->setS18sProperty('<{$property->getName()}>', $val);
<{/if}>
	}
<{if $property->getType() == "DateTime"}>

	/**
	 * @param <{$property->getCommentaryType()}> $val
	 */
	public function setUI<{$property->getPhpName()}>($val)
	{
		$this->set<{$property->getPhpName()}>(date_Converter::convertDateToGMT($val));
	}
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getUI<{$property->getPhpName()}>()
	{
		return date_Converter::convertDateToLocal($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == 'XHTMLFragment'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::renderHtmlFragment($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == 'LongString' || $property->getType() == 'String'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::textToHtml($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == "BBCode"}>

	/**
	 * @param <{$property->getCommentaryType()}> $val
	 * @return void
	 */
	public function set<{$property->getPhpName()}>AsBBCode($val)
	{
		$parser = new website_BBCodeParser();
		$this->set<{$property->getPhpName()}>($parser->convertBBCodeToXml($val, $parser->getModuleProfile('<{$model->getModuleName()}>')));
	}
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsBBCode()
	{
		$parser = new website_BBCodeParser();
		return $parser->convertXmlToBBCode($this->get<{$property->getPhpName()}>());
	}	
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		$parser = new website_BBCodeParser();
		return $parser->convertXmlToHtml($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == "JSON"}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getDecoded<{$property->getPhpName()}>()
	{
		$val = $this->get<{$property->getPhpName()}>();
		return $val === null ? $val : JsonService::getInstance()->decode($val);
	}	
<{/if}>
<{if $property->getType() == "Object"}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getDecoded<{$property->getPhpName()}>()
	{
		$val = $this->get<{$property->getPhpName()}>();
		return $val === null ? $val : unserialize($val);
	}
<{/if}>
<{if $property->getType() == "DocumentId"}>

	/**
	 * @return <{$property->getCommentaryDocumentType()}>|NULL
	 */
	public function get<{$property->getPhpName()}>Instance()
	{
		return DocumentHelper::getDocumentInstanceIfExists($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getFromList()}>

	/**
	 * @return string
	 */
	public function get<{$property->getPhpName()}>Label()
	{
		$list = list_ListService::getInstance()->getByListId('<{$property->getFromList()}>');
		if ($list === null)
		{
			return null;
		}
		$listItem = $list->getItemByValue($this->get<{$property->getPhpName()}>());
		if ($listItem === null)
		{
			return null;
		}
		return $listItem->getLabel();
	}
	
	/**
	 * @return String
	 */
	public function get<{$property->getPhpName()}>LabelAsHtml()
	{
		$label = $this->get<{$property->getPhpName()}>Label();
		return $label ? f_util_HtmlUtils::textToHtml($label) : null;
	}
<{/if}>
<{/foreach}>
<{foreach from=$model->getSerializedDocumentClassMember() item=property}>

	private $m_<{$property->getName()}>;
<{if !$property->isArray()}>

	/**
	 * @return integer or null
	 */
	public function get<{$property->getPhpName()}>Id()
	{
		$id = intval($this->getS18sProperty('<{$property->getName()}>'));
		return $id > 0 ? $id : null;
	}
	
	private function checkLoaded<{$property->getName()}>()
	{
		$id = $this->get<{$property->getPhpName()}>Id();
		if (null === $this->m_<{$property->getName()}>)
		{
			$this->m_<{$property->getName()}> = new f_persistentdocument_PersistentDocumentArray($this, '<{$property->getName()}>', '', '', false);
			if ($id !== null) { $this->m_<{$property->getName()}>->loadDocumentId($id);}
		}
	}

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return (count($this->m_<{$property->getName()}>) === 1) ? $this->m_<{$property->getName()}>[0] : null;
	}
	
	/**
	 * @param <{$property->getCommentaryType()}> $newValue
	 * @return void
	 */
	public function set<{$property->getPhpName()}>($newValue)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		$oldValue = (count($this->m_<{$property->getName()}>) == 1) ? $this->m_<{$property->getName()}>[0] : null;
		if (!DocumentHelper::equals($oldValue, $newValue))
		{
			if ($newValue instanceof f_persistentdocument_PersistentDocument)
			{
				$this->m_<{$property->getName()}>[0] = $newValue;
				$this->setS18sProperty('<{$property->getName()}>', $newValue->getId());
			}
			else
			{
				if (count($this->m_<{$property->getName()}>) == 1) $this->m_<{$property->getName()}>->offsetUnset(0);
				$this->setS18sProperty('<{$property->getName()}>', null);
			}
		}
	}
<{else}>

	/**
	 * @return integer[]
	 */
	public function get<{$property->getPhpName()}>Ids()
	{
		$ids = $this->getS18sProperty('<{$property->getName()}>');
		return is_array($ids) ? $ids : array();
	}
	
	private function checkLoaded<{$property->getPhpName()}>()
	{
		$ids = $this->get<{$property->getPhpName()}>Ids();
		if (null === $this->m_<{$property->getName()}>)
		{
			$this->m_<{$property->getName()}> = new f_persistentdocument_PersistentDocumentArray($this, '<{$property->getName()}>', '', '', false);
			if (count($ids)) 
			{
				$this->m_<{$property->getName()}>->loadSerializedDocumentIds($ids);
			}
		}
	}

	/**
	 * @param integer $index
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>($index)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>[$index];
	}

	/**
	 * @return <{$property->getCommentaryType()}>[]
	 */
	public function get<{$property->getPhpName()}>Array()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>->getArrayCopy();
	}

	/**
	 * @return <{$property->getCommentaryType()}>[]
	 */
	public function getPublished<{$property->getPhpName()}>Array()
	{
		$publishedDocumentArray = array();
		foreach ($this->get<{$property->getPhpName()}>Array() as $document)
		{
			if ($document->isPublished())
			{
				$publishedDocumentArray[] = $document;
			}
		}
		return $publishedDocumentArray;
	}

	/**
	 * @return integer
	 */
	public function get<{$property->getPhpName()}>Count()
	{
		$this->checkLoaded();
		return $this->m_<{$property->getName()}>->count();
	}
	
	/**
	 * @return integer
	 */
	public function getPublished<{$property->getPhpName()}>Count()
	{
		return count($this->getPublished<{$property->getPhpName()}>Array());
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 * @return integer
	 */
	public function getIndexof<{$property->getPhpName()}>($value)
	{
		if ($value === null) throw new Exception(__METHOD__.": document can not be null");
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>->indexOf($value);
	}
	
	/**
	 * @param integer $index
	 * @param <{$property->getCommentaryType()}> $newValue Can't not be null
	 */
	public function set<{$property->getPhpName()}>($index, $newValue)
	{
		if ($newValue === null) throw new Exception(__METHOD__.": document can not be null");
		$this->checkLoaded<{$property->getPhpName()}>();
		if (!DocumentHelper::equals($this->m_<{$property->getName()}>[$index], $newValue))
		{
			if ($this->m_<{$property->getName()}>->indexOf($newValue) == - 1)
			{			
				$this->m_<{$property->getName()}>[$index] = $newValue;
				$ids = $this->m_<{$property->getName()}>->getIds();
				$this->setS18sProperty('<{$property->getName()}>', $ids);
			}
		}
	}

	/**
	 * @param <{$property->getCommentaryType()}>[] $newValueArray Can't not be null
	 */
	public function set<{$property->getPhpName()}>Array($newValueArray)
	{
		if (!is_array($newValueArray)) throw new Exception("Invalid type of document array");
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($this->m_<{$property->getName()}>->getArrayCopy() != $newValueArray)
		{
			$this->m_<{$property->getName()}>->exchangeArray($newValueArray);
			$ids = $this->m_<{$property->getName()}>->getIds();
			$this->setS18sProperty('<{$property->getName()}>', $ids);
		}			
	}

	/**
	 * @param <{$property->getCommentaryType()}> $newValue  Can't not be null
	 */
	public function add<{$property->getPhpName()}>($newValue)
	{
		if ($newValue === null) throw new Exception(__METHOD__.": document can not be null");
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($this->m_<{$property->getName()}>->indexOf($newValue) == - 1)
		{
			$this->m_<{$property->getName()}>[] = $newValue;
			$ids = $this->m_<{$property->getName()}>->getIds();
			$this->setS18sProperty('<{$property->getName()}>', $ids);
		}
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function remove<{$property->getPhpName()}>($value)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($value instanceof f_persistentdocument_PersistentDocument)
		{
			$index = $this->m_<{$property->getName()}>->indexOf($value);
			if ($index != -1)
			{
				unset($this->m_<{$property->getName()}>[$index]);
				$ids = $this->m_<{$property->getName()}>->getIds();
				$this->setS18sProperty('<{$property->getName()}>', $ids);
			}
		}
		else
		{
			throw new IllegalArgumentException('$value is not valid <{$property->getCommentaryType()}> instance');
		}
	}

	/**
	 * @param integer $index
	 */
	public function remove<{$property->getPhpName()}>ByIndex($index)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if (isset($this->m_<{$property->getName()}>[$index]))
		{
			unset($this->m_<{$property->getName()}>[$index]);
			$ids = $this->m_<{$property->getName()}>->getIds();
			$this->setS18sProperty('<{$property->getName()}>', $ids);
		}
	}

	public function removeAll<{$property->getPhpName()}>()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($this->m_<{$property->getName()}>->count() != 0)
		{
			$this->m_<{$property->getName()}>->removeAll();
			$this->setS18sProperty('<{$property->getName()}>', null);
		}
	}
<{/if}>
<{/foreach}>
<{if $model->hasCascadeDelete()}>

	/**
	 * @internal For framework internal usage only
	 */
	public function preCascadeDelete()
	{
		parent::preCascadeDelete();
<{foreach from=$model->getClassMember() item=property}>
<{if $property->hasCascadeDelete()}>
		$this->checkLoaded<{$property->getPhpName()}>();
<{/if}>
<{/foreach}>
	}

	/**
	 * @internal For framework internal usage only
	 */
	public function postCascadeDelete()
	{
<{foreach from=$model->getClassMember() item=property}>
<{if $property->hasCascadeDelete()}>
<{if $property->isArray()}>
		$val = $this->get<{$property->getPhpName()}>Array();
		foreach ($val as $item)
		{
			$item->delete();
		}
<{else}>
		$item = $this->get<{$property->getPhpName()}>();
		if (null !== $item)
		{
			$item->delete();
		}
<{/if}>
<{/if}>
<{/foreach}>
		parent::postCascadeDelete();
	}
<{/if}>
<{if $model->hasChildrenProperties()}>

	/**
	 * @return f_persistentdocument_PersistentTreeNode
	 */
	public function getDocumentNode()
	{
		if ($this->isNew())
		{
			return null;
		}
		return TreeService::getInstance()->getInstanceByDocument($this);
	}

	/**
	 * @param f_persistentdocument_PersistentTreeNode[] $nodes
	 * @return f_persistentdocument_PersistentDocument[]
	 */
	protected function convertNodesToDocuments($nodes)
	{
		$documents = array();
		foreach ($nodes as $node)
		{
			$documents[] = $node->getPersistentDocument();
		}
		return $documents;
	}

	/**
	 * @return f_persistentdocument_PersistentDocument[]
	 */
	public function getChildren()
	{
		$node = $this->getDocumentNode();
		if (null === $node)
		{
			return array();
		}
		return $this->convertNodesToDocuments($node->getChildren());
	}

	/**
	 * Document accepted : <{foreach from=$model->getChildrenProperties() item=property}><{$property->getType()}>, <{/foreach}>
	 * @param f_persistentdocument_PersistentDocument $document
	 * @return f_persistentdocument_PersistentTreeNode
	 */
	public function addChildDocument($document)
	{
		$node = $this->getDocumentNode();
		$validType = $this->getPersistentModel()->isChildValidType($document->getDocumentModelName());
		if ((null === $node) || !$validType || $document->isNew())
		{
			return null;
		}

		$doc = $node->getChildByDocumentId($document->getId());

		if (null !== $doc)
		{
			return $doc;
		}
		return TreeService::getInstance()->newLastChild(node, $document->getId());
	}
<{foreach from=$model->getChildrenProperties() item=property}>

	/**
	 * @return <{$property->getCommentaryType()}>[]
	 */
	public function getChildren<{$property->getPhpName()}>()
	{
		$query = $this->getProvider()->createQuery('<{$property->getType()}>')
				->add(Restrictions::childOf($this->getId()));
		return $query->find();
	}

	/**
	 * @return <{$property->getCommentaryType()}>[]
	 */
	public function getChildrenPublished<{$property->getPhpName()}>()
	{
		$query = $this->getProvider()->createQuery('<{$property->getType()}>')
				->add(Restrictions::published())
				->add(Restrictions::childOf($this->getId()));
		return $query->find();
	}
<{/foreach}>
<{/if}>
<{foreach from=$model->getInverseProperties() item=property}>

	/**
	 * @return <{$property->getCommentaryType()}>[]
	 */
	public function get<{$property->getPhpName()}>ArrayInverse($offset = 0, $nbDocuments = -1)
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getDocumentType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()))
			->addOrder(Order::asc('document_label'))
			->setFirstResult($offset)->setMaxResults($nbDocuments);

		return $query->find();
	}

	/**
	 * @return <{$property->getCommentaryType()}>[]
	 */
	public function getPublished<{$property->getPhpName()}>ArrayInverse($offset = 0, $nbDocuments = -1)
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getDocumentType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()))
			->add(Restrictions::published())
			->addOrder(Order::asc('document_label'))
			->setFirstResult($offset)->setMaxResults($nbDocuments);
		return $query->find();
	}

	/**
	 * @return integer
	 */
	public function get<{$property->getPhpName()}>CountInverse()
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getDocumentType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()))
			->setProjection(Projections::rowCount('rows'));
		$result = $query->find();

		return intval($result[0]['rows']);
	}
	
	/**
	 * @return integer
	 */
	public function getPublished<{$property->getPhpName()}>CountInverse()
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getDocumentType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()))
			->add(Restrictions::published())
			->setProjection(Projections::rowCount('rows'));
		$result = $query->find();

		return intval($result[0]['rows']);
	}
<{if $property->isArray()}>

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function add<{$property->getPhpName()}>Inverse($value)
	{
		if ($value->getIndexof<{$property->getRelationName()|capitalize}>($this) == -1)
		{
			$value->add<{$property->getRelationName()|capitalize}>($this);
			$this->addDocumentInverse($value);
		}
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function remove<{$property->getPhpName()}>Inverse($value)
	{
		$value->remove<{$property->getRelationName()|capitalize}>($this);
		$this->addDocumentInverse($value);
	}

	public function removeAll<{$property->getPhpName()}>Inverse()
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getDocumentType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()));

		foreach ($query->find() as $value)
		{
			$value->remove<{$property->getRelationName()|capitalize}>($this);
			$this->addDocumentInverse($value);
		}
	}
<{else}>

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function set<{$property->getPhpName()}>Inverse($value)
	{
		$value->set<{$property->getRelationName()|capitalize}>($this);
		$this->addDocumentInverse($value);
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function remove<{$property->getPhpName()}>Inverse($value)
	{
		if (DocumentHelper::equals($this, $value->get<{$property->getRelationName()|capitalize}>()))
		{
			$value->set<{$property->getRelationName()|capitalize}>(null);
			$this->addDocumentInverse($value);
		}
	}
<{/if}>
<{/foreach}>
}
