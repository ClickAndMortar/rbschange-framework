/**
 * Do not edit this file as it will be re-created when compiling documents.
 * Edit <{$model->getDocumentClassName()}> file instead.
 * @package modules.<{$model->getModuleName()}>.persistentdocument
 */
class <{$model->getDocumentClassName()}>base extends <{$model->getBaseClassName()}>
{
<{foreach from=$model->getPrivateClassMember() item=property}>
	private $m_<{$property->getName()}>;
<{/foreach}>

	private static $__serializedPropertyNames;

	public function __sleep()
	{
		$this->__cleanDocumentPropertiesForSleep();
		return $this->__getSerializedPropertyNames();
	}

	protected function __getSerializedPropertyNames()
	{
		if (self::$__serializedPropertyNames === null)
		{
			self::$__serializedPropertyNames = array_merge(parent::__getSerializedPropertyNames(), array(<{foreach from=$model->getPrivateClassMember() item=property}>"\0<{$model->getDocumentClassName()}>base\0m_<{$property->getName()}>",<{/foreach}>));
		}
		return self::$__serializedPropertyNames;
	}

	protected function __cleanDocumentPropertiesForSleep()
	{
		parent::__cleanDocumentPropertiesForSleep();
<{foreach from=$model->getPrivateClassMember() item=property}>
<{if $property->isDocument()}>
		if ($this->m_<{$property->getName()}> !== null && !is_numeric($this->m_<{$property->getName()}>))
		{
			$<{$property->getName()}>Count = $this->m_<{$property->getName()}>->count(); 
			if ($<{$property->getName()}>Count > 0)
			{
<{if $property->isArray()}>
				$this->m_<{$property->getName()}> = $<{$property->getName()}>Count;
<{else}>			
				$this->m_<{$property->getName()}> = $this->m_<{$property->getName()}>[0]->getId();
<{/if}>
			}
			else
			{
				$this->m_<{$property->getName()}> = null;
			}
		}
<{/if}>
<{/foreach}>
	}
    
	/**
	 * @return <{$model->getDocumentClassName()}>
	 */
	public static function getNewInstance()
	{
		return <{$model->getServiceClassName()}>::getInstance()->getNewDocumentInstance();
	}
	
	/**
	 * @return <{$model->getDocumentClassName()}>
	 */
	public static function getInstanceById($documentId)
	{
		return <{$model->getServiceClassName()}>::getInstance()->getDocumentInstance($documentId, '<{$model->getName()}>');
	}

	/**
	 * Constructor
	 * @internal For framework internal usage only
	 *
	 * @param Integer $id
	 * @param I18nInfo $i18nInfo
	 * @param Integer $treeId
	 */
	public function __construct($id = 0, $i18nInfo = null, $treeId = null)
	{
		parent::__construct($id, $i18nInfo, $treeId);
	}

    public function __destruct()
    {
    	$this->resetDocumentProperties();
        parent::__destruct();
    }
    
    protected function resetDocumentProperties()
    {
<{foreach from=$model->getPrivateClassMember() item=property}>
<{if $property->isDocument()}>
		$this->m_<{$property->getName()}> = null;
<{/if}>
<{/foreach}>
    }

	/**
	 * @return void
	 */
	protected function setDefaultValues()
	{
<{$model->getPhpDefaultValues()}>
	}

	/**
	 * @return <{$model->getDocumentClassName()}>model
	 */
	public function getPersistentModel()
	{
		return f_persistentdocument_PersistentDocumentModel::getInstance('<{$model->getModuleName()}>', '<{$model->getDocumentName()}>');
	}

	/**
	 * @return String constant '<{$model->getName()}>'
	 */
	public function getDocumentModelName()
	{
		return '<{$model->getName()}>';
	}

	/**
	 * @return Boolean
	 */
	public function isLocalized()
	{
		return <{$model->escapeBoolean($model->isLocalized())}>;
	}

	/**
	 * @internal For framework internal usage only
	 * @param Boolean $loadAll if all data must be retrieved (by default)
	 * @return array<String, mixed>
	 */
	public function getDocumentProperties($loadAll = true)
	{
		$propertyBag = parent::getDocumentProperties($loadAll);
<{if $model->getInitSerializedproperties()}>
		$this->serializeS18s();
<{/if}>
<{if $model->isLocalized()}>
		$voObject = $this->getI18nVoObject();
<{foreach from=$model->getClassI18nMember() item=property}>
		$propertyBag['<{$property->getName()}>'] = $voObject->get<{$property->getPhpName()}>();
<{/foreach}>
<{/if}>

<{foreach from=$model->getPrivateClassMember() item=property}>
<{if $property->isDocument()}>
        if ($loadAll)
        {
        	$this->checkLoaded<{$property->getPhpName()}>();
        	$propertyBag['<{$property->getName()}>'] = $this->m_<{$property->getName()}>;
        }
        elseif ($this->m_<{$property->getName()}> !== null && !is_numeric($this->m_<{$property->getName()}>))
        {
        	$propertyBag['<{$property->getName()}>'] = $this->m_<{$property->getName()}>;
        }
<{else}>
		$propertyBag['<{$property->getName()}>'] = $this->m_<{$property->getName()}>;
<{/if}>
<{/foreach}>
		return $propertyBag;
	}

	/**
	 * @internal For framework internal usage only
	 * @param array<String, mixed> $lang
	 * @return void
	 */
	public function setDocumentProperties($propertyBag)
	{
		parent::setDocumentProperties($propertyBag);
		foreach ($propertyBag as $propertyName => $propertyValue)
		{
			switch ($propertyName)
			{
<{foreach from=$model->getPrivateClassMember() item=property}>
<{if $property->getType() == "Boolean"}>
                case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = (bool)$propertyValue; break;
<{elseif $property->getType() == "Integer"}>
                case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = (null === $propertyValue) ? null : intval($propertyValue); break;
<{elseif $property->getType() == "Double"}>
                case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = (null === $propertyValue) ? null : floatval($propertyValue); break;
<{else}>
				case '<{$property->getName()}>' : $this->m_<{$property->getName()}> = $propertyValue; break;
<{/if}>
<{/foreach}>
			}
		}
	}

	/**
	 * @return <{$model->getServiceClassName()}>
	 */
	public function getDocumentService()
	{
		return <{$model->getServiceClassName()}>::getInstance();
	}

	/**
	 * @return boolean
	 */
	public function isValid()
	{
		return parent::isValid()
<{foreach from=$model->getValidatesProperties() item=property}>
		&& $this->is<{$property->getPhpName()}>Valid()
<{/foreach}>;
	}

<{foreach from=$model->getPropertiesComplete() item=property}><{$property->phpPropertyValidationMethod()}>
<{/foreach}>

<{foreach from=$model->getClassI18nMember() item=property}>

	/**
	 * @param <{$property->getCommentaryType()}> $<{$property->getName()}>
	 * @return void
	 */
	public function set<{$property->getPhpName()}>($<{$property->getName()}>)
	{
		$this->checkLoaded();
		if ($this->set<{$property->getPhpName()}>Internal($<{$property->getName()}>))
		{
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}
	
<{if $property->getType() == "DateTime"}>
	/**
	 * @param <{$property->getCommentaryType()}> $<{$property->getName()}>
	 * @return void
	 */
	public function setUI<{$property->getPhpName()}>($<{$property->getName()}>)
	{
		$this->set<{$property->getPhpName()}>(date_Converter::convertDateToGMT($<{$property->getName()}>));
	}
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getUI<{$property->getPhpName()}>()
	{
		return date_Converter::convertDateToLocal($this->get<{$property->getPhpName()}>());
	}	
<{/if}>

	/**
	 * @param <{$property->getCommentaryType()}> $<{$property->getName()}>
	 * @return boolean true if modified
	 */
	protected function set<{$property->getPhpName()}>Internal($<{$property->getName()}>)
	{
<{if $property->getType() == "DateTime"}>
		if ($<{$property->getName()}> instanceof date_Calendar)
		{
			$<{$property->getName()}> = date_Formatter::format($<{$property->getName()}>, date_Formatter::SQL_DATE_FORMAT);
		}
		else if (is_long($<{$property->getName()}>))
		{
			$<{$property->getName()}> = date(date_Formatter::SQL_DATE_FORMAT, $<{$property->getName()}>);
		}
<{elseif $property->getType() == "Boolean"}>
		$<{$property->getName()}> = (bool) $<{$property->getName()}>;
<{elseif $property->getType() == "Integer"}>
		$<{$property->getName()}> = (null === $<{$property->getName()}>) ? null : intval($<{$property->getName()}>);
<{elseif $property->getType() == "Double"}>
		$<{$property->getName()}> = (null === $<{$property->getName()}>) ? null : floatval($<{$property->getName()}>);
<{/if}>

<{if $property->getPreserveOldValue()}>
		$i18nObject = $this->getI18nObject();
		$result = $i18nObject->set<{$property->getName()}>($<{$property->getName()}>);
		if ($result)
		{
			$this->setOldValue('<{$property->getName()}>', $i18nObject->get<{$property->getPhpName()}>OldValue(), $i18nObject->getLang());
		}
		return $result;
<{else}>
		return $this->getI18nObject()->set<{$property->getName()}>($<{$property->getName()}>);
<{/if}>
	}

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>()
	{
		$this->checkLoaded();
		return $this->getI18nObject()->get<{$property->getPhpName()}>();
	}

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getVo<{$property->getPhpName()}>()
	{
		$this->checkLoaded();
		return $this->getI18nVoObject()->get<{$property->getPhpName()}>();
	}

	/**
	 * @param String $lang
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>ForLang($lang)
	{
		$this->checkLoaded();
		return $this->getI18nObject($lang)->get<{$property->getPhpName()}>();
	}
<{if $property->getType() == 'XHTMLFragment'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::renderHtmlFragment($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == 'LongString' || $property->getType() == 'String'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::textToHtml($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getPreserveOldValue()}>

	/**
	 * @return <{$property->getCommentaryType()}> or null
	 */
	public function get<{$property->getPhpName()}>OldValue()
	{
		return $this->getOldValue('<{$property->getName()}>', $this->getI18nObject()->getLang());
	}
<{/if}>

<{/foreach}>
<{foreach from=$model->getPrivateClassMember() item=property}>
<{if !$property->isDocument()}>

	/**
	 * @param <{$property->getCommentaryType()}> $<{$property->getName()}>
	 * @return void
	 */
	public function set<{$property->getPhpName()}>($<{$property->getName()}>)
	{
		$this->checkLoaded();
<{if $property->getName() == "s18s"}>
	$this->m_s18sArray = null;
<{/if}>
		if ($this->set<{$property->getPhpName()}>Internal($<{$property->getName()}>))
		{
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}

<{if $property->getType() == "DateTime"}>
	/**
	 * @param <{$property->getCommentaryType()}> $<{$property->getName()}>
	 * @return void
	 */
	public function setUI<{$property->getPhpName()}>($<{$property->getName()}>)
	{
		$this->set<{$property->getPhpName()}>(date_Converter::convertDateToGMT($<{$property->getName()}>));
	}
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getUI<{$property->getPhpName()}>()
	{
		return date_Converter::convertDateToLocal($this->get<{$property->getPhpName()}>());
	}	
<{/if}>


<{if $property->getType() == "Double"}>
	/**
	 * @param <{$property->getCommentaryType()}> $<{$property->getName()}>
	 * @return Boolean
	 */
	protected function set<{$property->getPhpName()}>Internal($<{$property->getName()}>)
	{
		$<{$property->getName()}> = $<{$property->getName()}> !== null ? floatval($<{$property->getName()}>) : null;
		$modified = false;
		if ($this->m_<{$property->getName()}> === null || $<{$property->getName()}> === null)
		{
			$modified = ($this->m_<{$property->getName()}> !== $<{$property->getName()}>);
		}
		else
		{
			$modified = (abs($this->m_<{$property->getName()}> - $<{$property->getName()}>) > 0.0001);
		}
		if ($modified)
		{
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
<{/if}>
			$this->m_<{$property->getName()}> = $<{$property->getName()}>;
		}
		return $modified;
	}
<{else}>
	/**
	 * @param <{$property->getCommentaryType()}> $<{$property->getName()}>
	 * @return Boolean
	 */
	protected function set<{$property->getPhpName()}>Internal($<{$property->getName()}>)
	{
<{if $property->getType() == "DateTime"}>
		if ($<{$property->getName()}> instanceof date_Calendar)
		{
			$<{$property->getName()}> = date_Formatter::format($<{$property->getName()}>, date_Formatter::SQL_DATE_FORMAT);
		}
		else if (is_long($<{$property->getName()}>))
		{
			$<{$property->getName()}> = date(date_Formatter::SQL_DATE_FORMAT, $<{$property->getName()}>);
		}
<{elseif $property->getType() == "Boolean"}>
		$<{$property->getName()}> = (bool) $<{$property->getName()}>;
<{elseif $property->getType() == "Integer"}>
		$<{$property->getName()}> = (null === $<{$property->getName()}>) ? null : intval($<{$property->getName()}>);
<{/if}>
		if ($this->m_<{$property->getName()}> !== $<{$property->getName()}>)
		{
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>);
<{/if}>
			$this->m_<{$property->getName()}> = $<{$property->getName()}>;
			return true;
		}
		return false;
	}
<{/if}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>()
	{
		$this->checkLoaded();
		return $this->m_<{$property->getName()}>;
	}
<{if $property->getType() == 'XHTMLFragment'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::renderHtmlFragment($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == 'LongString' || $property->getType() == 'String'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::textToHtml($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getPreserveOldValue()}>

	/**
	 * @return <{$property->getCommentaryType()}> or null
	 */
	public function get<{$property->getPhpName()}>OldValue()
	{
		return $this->getOldValue('<{$property->getName()}>');
	}
<{/if}>
<{if $property->getFromList() && $property->getMaxOccurs() == 1}>
	/**
	 * @return String
	 */
	public function get<{$property->getPhpName()}>LabelAsHtml()
	{
		$list = list_ListService::getInstance()->getByListId('<{$property->getFromList()}>');
		if ($list === null)
		{
			return null;
		}
		$listItem = $list->getItemByValue($this->get<{$property->getPhpName()}>());
		if ($listItem === null)
		{
			return null;
		}
		return f_util_HtmlUtils::textToHtml($listItem->getLabel());
	}
<{/if}>
<{elseif  $property->isDocument() && !$property->isArray()}>

	private function checkLoaded<{$property->getName()}>()
	{
		$this->checkLoaded();
		if ((null === $this->m_<{$property->getName()}>) || is_numeric($this->m_<{$property->getName()}>))
		{
			$id = intval($this->m_<{$property->getName()}>);
			$this->m_<{$property->getName()}> = new f_persistentdocument_PersistentDocumentArray($this, '<{$property->getName()}>', 'CHILD', 'TREE', <{$model->escapeBoolean($property->getPreserveOldValue())}>);
			$this->m_<{$property->getName()}>->loadDocumentId($id);
		}
	}

	/**
	 * @param <{$property->getCommentaryType()}> $newValue
	 * @return void
	 */
	public function set<{$property->getPhpName()}>($newValue)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		$old<{$property->getPhpName()}> = (count($this->m_<{$property->getName()}>) == 1) ? $this->m_<{$property->getName()}>[0] : null;
		if (!DocumentHelper::equals($old<{$property->getPhpName()}>, $newValue))
		{
			if ($newValue == null)
			{
				if (count($this->m_<{$property->getName()}>) == 1) $this->m_<{$property->getName()}>->offsetUnset(0);
			}
			else
			{
				$this->m_<{$property->getName()}>[0] = $newValue;
			}
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>->getOldValues());
<{/if}>
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return (count($this->m_<{$property->getName()}>) == 1) ? $this->m_<{$property->getName()}>[0] : null;
	}

<{if $property->getPreserveOldValue()}>

	/**
	 * @return Integer or null
	 */
	public function get<{$property->getPhpName()}>OldValueId()
	{
		$result = $this->getOldValue('<{$property->getName()}>');
		if (is_array($result) && isset($result[0]))
		{
			return $result[0];
		}
		return null;
	}
<{/if}>

<{elseif  $property->isDocument() && $property->isArray()}>

	private function checkLoaded<{$property->getPhpName()}>()
	{
		$this->checkLoaded();
		if (!$this->m_<{$property->getName()}> instanceof f_persistentdocument_PersistentDocumentArray)
		{
			$this->m_<{$property->getName()}> = new f_persistentdocument_PersistentDocumentArray($this, '<{$property->getName()}>', 'CHILD', 'TREE', <{$model->escapeBoolean($property->getPreserveOldValue())}>);
			if ($this->getDocumentPersistentState() != self::PERSISTENTSTATE_NEW)
			{
				$this->getProvider()->loadRelations($this->m_<{$property->getName()}>);
			}
		}
	}

	/**
	 * @param Integer $index
	 * @param <{$property->getCommentaryType()}> $newValue Can't not be null
	 * @return void
	 */
	public function set<{$property->getPhpName()}>($index, $newValue)
	{
		if ($newValue === null) throw new Exception(__METHOD__.": document can not be null");
		$this->checkLoaded<{$property->getPhpName()}>();
		if (!DocumentHelper::equals($this->m_<{$property->getName()}>[$index], $newValue))
		{
			if ($this->m_<{$property->getName()}>->indexOf($newValue) == - 1)
			{
				$this->m_<{$property->getName()}>[$index] = $newValue;
<{if $property->getPreserveOldValue()}>
				$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>->getOldValues());
<{/if}>
				$this->propertyUpdated('<{$property->getName()}>');
			}
		}
	}

	/**
	 * @param array<<{$property->getCommentaryType()}>> $newValueArray Can't not be null
	 * @return void
	 */
	public function set<{$property->getPhpName()}>Array($newValueArray)
	{
		if (!is_array($newValueArray)) throw new Exception("Invalid type of document array");
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($this->m_<{$property->getName()}>->getArrayCopy() != $newValueArray)
		{
			$this->m_<{$property->getName()}>->exchangeArray($newValueArray);
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>->getOldValues());
<{/if}>
			$this->propertyUpdated('<{$property->getName()}>');
		}			
	}

	/**
	 * @param <{$property->getCommentaryType()}> $newValue  Can't not be null
	 * @return void
	 */
	public function add<{$property->getPhpName()}>($newValue)
	{
		if ($newValue === null) throw new Exception(__METHOD__.": document can not be null");
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($this->m_<{$property->getName()}>->indexOf($newValue) == - 1)
		{
			$this->m_<{$property->getName()}>[] = $newValue;
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>->getOldValues());
<{/if}>
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 * @return void
	 */
	public function remove<{$property->getPhpName()}>($value)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if (is_numeric($value))
		{
			if (isset($this->m_<{$property->getName()}>[$value]))
			{
				unset($this->m_<{$property->getName()}>[$value]);
<{if $property->getPreserveOldValue()}>
				$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>->getOldValues());
<{/if}>
				$this->propertyUpdated('<{$property->getName()}>');
			}
		}
		elseif ($value instanceof f_persistentdocument_PersistentDocument)
		{
			$index = $this->m_<{$property->getName()}>->indexOf($value);
			if ($index != -1)
			{
				unset($this->m_<{$property->getName()}>[$index]);
<{if $property->getPreserveOldValue()}>
				$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>->getOldValues());
<{/if}>
				$this->propertyUpdated('<{$property->getName()}>');
			}
		}
		else
		{
			throw new IllegalArgumentException('$value is not valid <{$property->getCommentaryType()}> instance');
		}
	}

	/**
	 * @param Integer $index
	 * @return void
	 */
	public function remove<{$property->getPhpName()}>ByIndex($index)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if (isset($this->m_<{$property->getName()}>[$index]))
		{
			unset($this->m_<{$property->getName()}>[$index]);
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>->getOldValues());
<{/if}>
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}



	/**
	 * @return void
	 */
	public function removeAll<{$property->getPhpName()}>()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($this->m_<{$property->getName()}>->count() != 0)
		{
			$this->m_<{$property->getName()}>->removeAll();
<{if $property->getPreserveOldValue()}>
			$this->setOldValue('<{$property->getName()}>', $this->m_<{$property->getName()}>->getOldValues());
<{/if}>
			$this->propertyUpdated('<{$property->getName()}>');
		}
	}

	/**
	 * @param Integer $index
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>($index)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>[$index];
	}

	/**
	 * @return array<<{$property->getCommentaryType()}>>
	 */
	public function get<{$property->getPhpName()}>Array()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>->getArrayCopy();
	}

	/**
	 * @return array<<{$property->getCommentaryType()}>>
	 */
	public function getPublished<{$property->getPhpName()}>Array()
	{
		$publishedDocumentArray = array();
		foreach ($this->get<{$property->getPhpName()}>Array() as $document)
		{
			if ($document->isPublished())
			{
				$publishedDocumentArray[] = $document;
			}
		}
		return $publishedDocumentArray;
	}

<{if $property->getPreserveOldValue()}>

	/**
	 * @return array<Integer>
	 */
	public function get<{$property->getPhpName()}>OldValueIds()
	{
		$result = $this->getOldValue('<{$property->getName()}>');
		if (is_array($result))
		{
			return $result;
		}
		return array();
	}
<{/if}>

	/**
	 * @return Integer
	 */
	public function get<{$property->getPhpName()}>Count()
	{
		$this->checkLoaded();
		if ($this->m_<{$property->getName()}> instanceof f_persistentdocument_PersistentDocumentArray)
		{
			return $this->m_<{$property->getName()}>->count();
		}
		else
		{
			return intval($this->m_<{$property->getName()}>);
		}
	}

	/**
	 * @return Integer
	 */
	public function getPublished<{$property->getPhpName()}>Count()
	{
		return count($this->getPublished<{$property->getPhpName()}>Array());
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 * @return Integer
	 */
	public function getIndexof<{$property->getPhpName()}>($value)
	{
		if ($value === null) throw new Exception(__METHOD__.": document can not be null");
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>->indexOf($value);
	}
<{/if}>
<{/foreach}>
<{if $model->getInitSerializedproperties()}>

	private $m_s18sArray;
	
	protected function serializeS18s()
	{
		if ($this->m_s18sArray !== null)
		{
			$this->setS18s(serialize($this->m_s18sArray));
			$this->m_s18sArray = null;
		}
	}
	
	protected function unserializeS18s()
	{
		$string = $this->getS18s();
		if ($string === null)
		{
			$this->m_s18sArray = array();
		}
		else
		{
			$this->m_s18sArray = unserialize($string);
		}
	}
	
	protected function getS18sProperty($name)
	{
		if ($this->m_s18sArray === null) {$this->unserializeS18s();}
		if (isset($this->m_s18sArray[$name]))
		{
			return $this->m_s18sArray[$name];
		}
		return null;
	}
	
	protected function setS18sProperty($name, $value)
	{
		if ($this->m_s18sArray === null) {$this->unserializeS18s();}
		$this->m_s18sArray[$name] = $value;
		$this->propertyUpdated('s18s');
	}
	
<{if $model->isLocalized()}>
	protected function getI18NS18sProperty($name)
	{
		if ($this->m_s18sArray === null) {$this->unserializeS18s();}
		return $this->getI18nObject()->getS18sProperty($name);
	}
	
	protected function setI18NS18sProperty($name, $value)
	{
		if ($this->m_s18sArray === null) {$this->unserializeS18s();}
		$this->getI18nObject()->setS18sProperty($name, $value);
		$this->propertyUpdated('s18s');
	}
	
<{/if}>
<{/if}>
<{foreach from=$model->getSerializedClassMember() item=property}>
<{if !$property->isDocument()}>
<{if $property->getType() == "DateTime"}>
	/**
	 * @param <{$property->getCommentaryType()}> $<{$property->getName()}>
	 * @return void
	 */
	public function setUI<{$property->getPhpName()}>($<{$property->getName()}>)
	{
		$this->set<{$property->getPhpName()}>(date_Converter::convertDateToGMT($<{$property->getName()}>));
	}
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function getUI<{$property->getPhpName()}>()
	{
		return date_Converter::convertDateToLocal($this->get<{$property->getPhpName()}>());
	}
	
<{/if}>
	/**
	 * @param <{$property->getCommentaryType()}> $<{$property->getName()}>
	 * @return void
	 */
	public function set<{$property->getPhpName()}>($<{$property->getName()}>)
	{
<{if $property->getType() == "Double"}>
		$<{$property->getName()}> = $<{$property->getName()}> !== null ? floatval($<{$property->getName()}>) : null;	
<{elseif $property->getType() == "DateTime"}>
		if ($<{$property->getName()}> instanceof date_Calendar)
		{
			$<{$property->getName()}> = date_Formatter::format($<{$property->getName()}>, date_Formatter::SQL_DATE_FORMAT);
		}
		else if (is_long($<{$property->getName()}>))
		{
			$<{$property->getName()}> = date(date_Formatter::SQL_DATE_FORMAT, $<{$property->getName()}>);
		}
		else if (null === $<{$property->getName()}>)
		{
			$<{$property->getName()}> = null;
		}
		else
		{
			$<{$property->getName()}> = strval($<{$property->getName()}>);
		}
<{elseif $property->getType() == "Boolean"}>
		$<{$property->getName()}> = (bool)$<{$property->getName()}>;
<{elseif $property->getType() == "Integer"}>
		$<{$property->getName()}> = (null === $<{$property->getName()}>) ? null : intval($<{$property->getName()}>);
<{else}>	
		$<{$property->getName()}> = (null === $<{$property->getName()}>) ? null : strval($<{$property->getName()}>);
<{/if}>
<{if $property->isLocalized()}>
		$this->setI18NS18sProperty('<{$property->getName()}>', $<{$property->getName()}>);
<{else}>
		$this->setS18sProperty('<{$property->getName()}>', $<{$property->getName()}>);
<{/if}>
	}

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>()
	{
<{if $property->isLocalized()}>
		return $this->getI18NS18sProperty('<{$property->getName()}>');
<{else}>
		return $this->getS18sProperty('<{$property->getName()}>');
<{/if}>
	}
<{if $property->getType() == 'XHTMLFragment'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::renderHtmlFragment($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{if $property->getType() == 'LongString' || $property->getType() == 'String'}>

	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>AsHtml()
	{
		return f_util_HtmlUtils::textToHtml($this->get<{$property->getPhpName()}>());
	}
<{/if}>
<{elseif $property->isDocument() && !$property->isArray()}>

	private $m_<{$property->getName()}>;
	
	private function checkLoaded<{$property->getName()}>()
	{
		$id = intval($this->getS18sProperty('<{$property->getName()}>'));
		if (null === $this->m_<{$property->getName()}>)
		{
			$this->m_<{$property->getName()}> = new f_persistentdocument_PersistentDocumentArray($this, '<{$property->getName()}>', '', '', <{$model->escapeBoolean($property->getPreserveOldValue())}>);
			if ($id > 0) { $this->m_<{$property->getName()}>->loadDocumentId($id);}
		}
	}

	/**
	 * @return integer or null
	 */
	public function get<{$property->getPhpName()}>Id()
	{
		$id = intval($this->getS18sProperty('<{$property->getName()}>'));
		return $id > 0 ? $id : null;
	}
	
	/**
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return (count($this->m_<{$property->getName()}>) == 1) ? $this->m_<{$property->getName()}>[0] : null;
	}
	
	/**
	 * @param <{$property->getCommentaryType()}> $newValue
	 * @return void
	 */
	public function set<{$property->getPhpName()}>($newValue)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		$old<{$property->getPhpName()}> = (count($this->m_<{$property->getName()}>) == 1) ? $this->m_<{$property->getName()}>[0] : null;
		if (!DocumentHelper::equals($old<{$property->getPhpName()}>, $newValue))
		{
			if ($newValue === null)
			{
				if (count($this->m_<{$property->getName()}>) == 1) $this->m_<{$property->getName()}>->offsetUnset(0);
				$this->setS18sProperty('<{$property->getName()}>', $newValue);
			}
			else
			{
				$this->m_<{$property->getName()}>[0] = $newValue;
				$this->setS18sProperty('<{$property->getName()}>', $newValue->getId());
			}
		}
	}
<{elseif  $property->isDocument() && $property->isArray()}>

	private $m_<{$property->getName()}>;
	
	private function checkLoaded<{$property->getPhpName()}>()
	{
		$ids = $this->getS18sProperty('<{$property->getName()}>');
		if (null === $this->m_<{$property->getName()}>)
		{
			$this->m_<{$property->getName()}> = new f_persistentdocument_PersistentDocumentArray($this, '<{$property->getName()}>', '', '', <{$model->escapeBoolean($property->getPreserveOldValue())}>);
			if (is_array($ids)) 
			{
				$this->m_<{$property->getName()}>->loadSerializedDocumentIds($ids);
			}
		}
	}

	/**
	 * @param integer $index
	 * @return <{$property->getCommentaryType()}>
	 */
	public function get<{$property->getPhpName()}>($index)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>[$index];
	}

	/**
	 * @return array<<{$property->getCommentaryType()}>>
	 */
	public function get<{$property->getPhpName()}>Array()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>->getArrayCopy();
	}

	/**
	 * @return array<<{$property->getCommentaryType()}>>
	 */
	public function getPublished<{$property->getPhpName()}>Array()
	{
		$publishedDocumentArray = array();
		foreach ($this->get<{$property->getPhpName()}>Array() as $document)
		{
			if ($document->isPublished())
			{
				$publishedDocumentArray[] = $document;
			}
		}
		return $publishedDocumentArray;
	}

	/**
	 * @return integer
	 */
	public function get<{$property->getPhpName()}>Count()
	{
		$this->checkLoaded();
		return $this->m_<{$property->getName()}>->count();
	}

	/**
	 * @return integer
	 */
	public function getPublished<{$property->getPhpName()}>Count()
	{
		return count($this->getPublished<{$property->getPhpName()}>Array());
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 * @return integer
	 */
	public function getIndexof<{$property->getPhpName()}>($value)
	{
		if ($value === null) throw new Exception(__METHOD__.": document can not be null");
		$this->checkLoaded<{$property->getPhpName()}>();
		return $this->m_<{$property->getName()}>->indexOf($value);
	}
	
	/**
	 * @return integer[]
	 */
	public function get<{$property->getPhpName()}>Ids()
	{
		$ids = $this->getS18sProperty('<{$property->getName()}>');
		return is_array($ids) ? $ids : array();
	}
	
	/**
	 * @param Integer $index
	 * @param <{$property->getCommentaryType()}> $newValue Can't not be null
	 * @return void
	 */
	public function set<{$property->getPhpName()}>($index, $newValue)
	{
		if ($newValue === null) throw new Exception(__METHOD__.": document can not be null");
		$this->checkLoaded<{$property->getPhpName()}>();
		if (!DocumentHelper::equals($this->m_<{$property->getName()}>[$index], $newValue))
		{
			if ($this->m_<{$property->getName()}>->indexOf($newValue) == - 1)
			{			
				$this->m_<{$property->getName()}>[$index] = $newValue;
				$ids = DocumentHelper::getIdArrayFromDocumentArray($this->m_<{$property->getName()}>);
				$this->setS18sProperty('<{$property->getName()}>', $ids);
			}
		}
	}

	/**
	 * @param array<<{$property->getCommentaryType()}>> $newValueArray Can't not be null
	 * @return void
	 */
	public function set<{$property->getPhpName()}>Array($newValueArray)
	{
		if (!is_array($newValueArray)) throw new Exception("Invalid type of document array");
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($this->m_<{$property->getName()}>->getArrayCopy() != $newValueArray)
		{
			$this->m_<{$property->getName()}>->exchangeArray($newValueArray);
			$ids = DocumentHelper::getIdArrayFromDocumentArray($newValueArray);
			$this->setS18sProperty('<{$property->getName()}>', $ids);
		}			
	}

	/**
	 * @param <{$property->getCommentaryType()}> $newValue  Can't not be null
	 * @return void
	 */
	public function add<{$property->getPhpName()}>($newValue)
	{
		if ($newValue === null) throw new Exception(__METHOD__.": document can not be null");
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($this->m_<{$property->getName()}>->indexOf($newValue) == - 1)
		{
			$this->m_<{$property->getName()}>[] = $newValue;
			$ids = DocumentHelper::getIdArrayFromDocumentArray($this->m_<{$property->getName()}>);
			$this->setS18sProperty('<{$property->getName()}>', $ids);
		}
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 * @return void
	 */
	public function remove<{$property->getPhpName()}>($value)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($value instanceof f_persistentdocument_PersistentDocument)
		{
			$index = $this->m_<{$property->getName()}>->indexOf($value);
			if ($index != -1)
			{
				unset($this->m_<{$property->getName()}>[$index]);
				$ids = DocumentHelper::getIdArrayFromDocumentArray($this->m_<{$property->getName()}>);
				$this->setS18sProperty('<{$property->getName()}>', $ids);
			}
		}
		else
		{
			throw new IllegalArgumentException('$value is not valid <{$property->getCommentaryType()}> instance');
		}
	}

	/**
	 * @param Integer $index
	 * @return void
	 */
	public function remove<{$property->getPhpName()}>ByIndex($index)
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if (isset($this->m_<{$property->getName()}>[$index]))
		{
			unset($this->m_<{$property->getName()}>[$index]);
			$ids = DocumentHelper::getIdArrayFromDocumentArray($this->m_<{$property->getName()}>);
			$this->setS18sProperty('<{$property->getName()}>', $ids);
		}
	}

	/**
	 * @return void
	 */
	public function removeAll<{$property->getPhpName()}>()
	{
		$this->checkLoaded<{$property->getPhpName()}>();
		if ($this->m_<{$property->getName()}>->count() != 0)
		{
			$this->m_<{$property->getName()}>->removeAll();
			$this->setS18sProperty('<{$property->getName()}>', null);
		}
	}
<{/if}>
<{/foreach}>

<{if $model->hasCascadeDelete()}>
	/**
	 * @internal For framework internal usage only
	 */
	public function preCascadeDelete()
	{
		parent::preCascadeDelete();
<{foreach from=$model->getClassMember() item=property}>
<{if $property->hasCascadeDelete()}>
		$this->checkLoaded<{$property->getPhpName()}>();
<{/if}>
<{/foreach}>
	}

	/**
	 * @internal For framework internal usage only
	 */
	public function postCascadeDelete()
	{
<{foreach from=$model->getClassMember() item=property}>
<{if $property->hasCascadeDelete()}>
<{if $property->isArray()}>
		$<{$property->getName()}> = $this->get<{$property->getPhpName()}>Array();
		foreach ($<{$property->getName()}> as $item)
		{
			$item->delete();
		}
<{else}>
		$item = $this->get<{$property->getPhpName()}>();
		if (null !== $item)
		{
			$item->delete();
		}
<{/if}>
<{/if}>
<{/foreach}>
		parent::postCascadeDelete();
	}
<{/if}>




<{if $model->hasChildrenProperties()}>

	/**
	 * @return f_persistentdocument_PersistentTreeNode
	 */
	public function getDocumentNode()
	{
		if ($this->isNew())
		{
			return null;
		}
		return TreeService::getInstance()->getInstanceByDocument($this);
	}

	/**
	 * @param array<f_persistentdocument_PersistentTreeNode> $nodes
	 * @return array<f_persistentdocument_PersistentDocument>
	 */
	protected function convertNodesToDocuments($nodes)
	{
		$documents = array();
		foreach ($nodes as $node)
		{
			$documents[] = $node->getPersistentDocument();
		}
		return $documents;
	}

	/**
	 * @return array<f_persistentdocument_PersistentDocument>
	 */
	public function getChildren()
	{
		$node = $this->getDocumentNode();
		if (null === $node)
		{
			return array();
		}
		return $this->convertNodesToDocuments($node->getChildren());
	}

	/**
	 * Document accepted : <{foreach from=$model->getChildrenProperties() item=property}><{$property->getType()}>, <{/foreach}>
	 * @param f_persistentdocument_PersistentDocument $document
	 * @return f_persistentdocument_PersistentTreeNode
	 */
	public function addChildDocument($document)
	{
		$node = $this->getDocumentNode();
		$validType = $this->getPersistentModel()->isChildValidType($document->getDocumentModelName());
		if ((null === $node) || !$validType || $document->isNew())
		{
			return null;
		}

		$doc = $node->getChildByDocumentId($document->getId());

		if (null !== $doc)
		{
			return $doc;
		}
		return TreeService::getInstance()->newLastChild(node, $document->getId());
	}
<{foreach from=$model->getChildrenProperties() item=property}>

	/**
	 * @return array<<{$property->getCommentaryType()}>>
	 */
	public function getChildren<{$property->getPhpName()}>()
	{
		$query = $this->getProvider()->createQuery('<{$property->getType()}>')
				->add(Restrictions::childOf($this->getId()));
		return $query->find();
	}

	/**
	 * @return array<<{$property->getCommentaryType()}>>
	 */
	public function getChildrenPublished<{$property->getPhpName()}>()
	{
		$query = $this->getProvider()->createQuery('<{$property->getType()}>')
				->add(Restrictions::published())
				->add(Restrictions::childOf($this->getId()));
		return $query->find();
	}
<{/foreach}>
<{/if}>
<{foreach from=$model->getInverseProperties() item=property}>
	/**
	 * @return array<<{$property->getCommentaryType()}>>
	 */
	public function get<{$property->getPhpName()}>ArrayInverse($offset = 0, $nbDocuments = -1)
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()))
			->addOrder(Order::asc('document_label'))
			->setFirstResult($offset)->setMaxResults($nbDocuments);

		return $query->find();
	}

	/**
	 * @return array<<{$property->getCommentaryType()}>>
	 */
	public function getPublished<{$property->getPhpName()}>ArrayInverse($offset = 0, $nbDocuments = -1)
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()))
			->add(Restrictions::published())
			->addOrder(Order::asc('document_label'))
			->setFirstResult($offset)->setMaxResults($nbDocuments);
		return $query->find();
	}

	/**
	 * @return Integer
	 */
	public function get<{$property->getPhpName()}>CountInverse()
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()))
			->setProjection(Projections::rowCount('rows'));
		$result = $query->find();

		return intval($result[0]['rows']);
	}
	
	/**
	 * @return Integer
	 */
	public function getPublished<{$property->getPhpName()}>CountInverse()
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()))
			->add(Restrictions::published())
			->setProjection(Projections::rowCount('rows'));
		$result = $query->find();

		return intval($result[0]['rows']);
	}
<{if $property->isArray()}>
	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function add<{$property->getPhpName()}>Inverse($value)
	{
		$value->add<{$property->getRelationName()|capitalize}>($this);
		$this->addDocumentInverse($value);
	}


	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function remove<{$property->getPhpName()}>Inverse($value)
	{
		$value->remove<{$property->getRelationName()|capitalize}>($this);
		$this->addDocumentInverse($value);
	}

	public function removeAll<{$property->getPhpName()}>Inverse()
	{
		$provider = $this->getProvider();
		$query = $provider->createQuery('<{$property->getType()}>')
			->add(Restrictions::eq('<{$property->getRelationName()}>.id', $this->getId()));

		foreach ($query->find() as $value)
		{
			$value->remove<{$property->getRelationName()|capitalize}>($this);
			$this->addDocumentInverse($value);
		}
	}
<{else}>
	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function set<{$property->getPhpName()}>Inverse($value)
	{
		$value->set<{$property->getRelationName()|capitalize}>($this);
		$this->addDocumentInverse($value);
	}

	/**
	 * @param <{$property->getCommentaryType()}> $value
	 */
	public function remove<{$property->getPhpName()}>Inverse($value)
	{
		if (DocumentHelper::equals($this, $value->get<{$property->getRelationName()|capitalize}>()))
		{
			$value->set<{$property->getRelationName()|capitalize}>(null);
			$this->addDocumentInverse($value);
		}
	}
<{/if}>
<{/foreach}>
}
