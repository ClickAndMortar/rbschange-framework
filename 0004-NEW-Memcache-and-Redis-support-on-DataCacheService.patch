From 04ecfadfa5409ae9e2d93874278a8bc20cb541f9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?K=C3=A9vin=20O'NEILL?= <kevin.oneill@rbs.fr>
Date: Tue, 27 Jul 2010 16:52:21 +0200
Subject: [PATCH 4/6] [NEW] Memcache and Redis support on DataCacheService

---
 cache/CacheService.class.php           |    3 +-
 cache/DataCacheFileService.class.php   |   31 ++--
 cache/DataCacheMemcacheService.php     |  299 ++++++++++++++++++++++++++++++++
 cache/DataCacheMongoService.php        |   71 +-------
 cache/DataCacheRedisService.php        |  264 ++++++++++++++++++++++++++++
 cache/DataCacheService.class.php       |   66 +++++---
 cache/SimpleCache.class.php            |  129 ++++++++++++++
 listener/SimpleCacheListener.class.php |   24 ++--
 8 files changed, 771 insertions(+), 116 deletions(-)
 create mode 100644 cache/DataCacheMemcacheService.php
 create mode 100644 cache/DataCacheRedisService.php

diff --git a/cache/CacheService.class.php b/cache/CacheService.class.php
index c2c6324..ba80d23 100755
--- a/cache/CacheService.class.php
+++ b/cache/CacheService.class.php
@@ -55,7 +55,8 @@ class CacheService extends BaseService
 
 	public function clearSimpleCache()
 	{
-		f_SimpleCache::clear();
+		//f_SimpleCache::clear();
+		f_DataCacheService::getInstance()->clearAll();
 	}
 	
 	/**
diff --git a/cache/DataCacheFileService.class.php b/cache/DataCacheFileService.class.php
index ce1c6e5..bdd4efc 100755
--- a/cache/DataCacheFileService.class.php
+++ b/cache/DataCacheFileService.class.php
@@ -69,6 +69,7 @@ class f_DataCacheFileService extends f_DataCacheService
 	 */
 	public function writeToCache($item)
 	{
+		f_util_FileUtils::mkdir($this->getCachePath($item));
 		$this->register($item);
 		$data = $item->getValues();
 		try
@@ -100,8 +101,8 @@ class f_DataCacheFileService extends f_DataCacheService
 	public function exists($item, $subCache = null)
 	{
 		$cachePath = $this->getCachePath($item, $subCache);
-		$subCaches = f_util_FileUtils::getDirFiles($cachePath);
-		$result = file_exists($cachePath) && $subCaches !== null && $this->isValid($item)
+		//$subCaches = f_util_FileUtils::getDirFiles($cachePath);
+		$result = file_exists($cachePath) && f_util_FileUtils::getDirFiles($cachePath) !== null && $this->isValid($item)
 			&& ($item->getTTL() === null || (time() - filemtime($cachePath)) < $item->getTTL()); 
 		$this->markAsBeingRegenerated($item);
 		return $result;
@@ -168,7 +169,7 @@ class f_DataCacheFileService extends f_DataCacheService
 		$this->dispatch = $dispatch || $this->dispatch;
 	}
 	
-	private function commitClear()
+	protected function commitClear()
 	{
 		if (Framework::isDebugEnabled())
 		{
@@ -237,7 +238,7 @@ class f_DataCacheFileService extends f_DataCacheService
 	/**
 	 * @param Array $docIds
 	 */
-	private function commitClearByDocIds($docIds)
+	protected function commitClearByDocIds($docIds)
 	{
 		foreach ($docIds as $id)
 		{
@@ -260,7 +261,7 @@ class f_DataCacheFileService extends f_DataCacheService
 	/**
 	 * @param Array $dirsToClear
 	 */
-	private function buildInvalidCacheList($dirsToClear)
+	protected function buildInvalidCacheList($dirsToClear)
 	{
 		foreach ($dirsToClear as $dir)
 		{
@@ -281,14 +282,14 @@ class f_DataCacheFileService extends f_DataCacheService
 	 * @param f_DataCacheItem $item
 	 * @return String
 	 */
-	private function getCachePath($item, $subCache = null)
+	protected function getCachePath($item, $subCache = null)
 	{
 		$cachePath = $item->getCachePath();
 		if ($cachePath === null)
 		{
 			$cachePath = f_util_FileUtils::buildCachePath('simplecache', $item->getNamespace(), $item->getKeyParameters());
 			$item->setCachePath($cachePath);
-			f_util_FileUtils::mkdir($cachePath);
+			//f_util_FileUtils::mkdir($cachePath);
 		}
 		if ($subCache === null)
 		{
@@ -301,7 +302,7 @@ class f_DataCacheFileService extends f_DataCacheService
 	 * @param f_DataCacheItem $item
 	 * @return Boolean
 	 */
-	private function isValid($item)
+	protected function isValid($item)
 	{
 		return !file_exists($this->getCachePath($item, self::INVALID_CACHE_ENTRY));
 	}
@@ -309,7 +310,7 @@ class f_DataCacheFileService extends f_DataCacheService
 	/**
 	 * @param f_DataCacheItem $item
 	 */
-	private function markAsBeingRegenerated($item)
+	protected function markAsBeingRegenerated($item)
 	{
 		if (!$this->isValid($item))
 		{
@@ -321,7 +322,7 @@ class f_DataCacheFileService extends f_DataCacheService
 	 * @param f_DataCacheItem $item
 	 * @return String
 	 */
-	private function getRegistrationPath($item)
+	protected function getRegistrationPath($item)
 	{
 		$registrationPath = $item->getRegistrationPath();
 		
@@ -336,7 +337,7 @@ class f_DataCacheFileService extends f_DataCacheService
 	/**
 	 * @param f_DataCacheItem $item
 	 */
-	private function register($item)
+	protected function register($item)
 	{
 		$registrationPath = $this->getRegistrationPath($item);
 		if (!file_exists($registrationPath))
@@ -355,14 +356,14 @@ class f_DataCacheFileService extends f_DataCacheService
 				$tm->rollBack($e);
 			}
 		}
-		$baseById = f_util_FileUtils::buildCachePath($this->registrationFolder, 'byDocId');
-
+		//$baseById = f_util_FileUtils::buildCachePath($this->registrationFolder, 'byDocId');
+		$baseById = $this->registrationFolder.DIRECTORY_SEPARATOR.'byDocId';
+		
 		foreach ($item->getPatterns() as $spec)
 		{
 			if (is_numeric($spec))
 			{
-				$byIdRegister = $baseById . implode(DIRECTORY_SEPARATOR, str_split($spec, 3)) . DIRECTORY_SEPARATOR;
-				$byIdRegister .= $item->getNamespace() . '_' . $item->getKeyParameters();
+				$byIdRegister = $baseById.DIRECTORY_SEPARATOR.implode(DIRECTORY_SEPARATOR, str_split($spec, 3)).DIRECTORY_SEPARATOR.$item->getNamespace().'_'.$item->getKeyParameters();
 				if (!file_exists($byIdRegister))
 				{
 					f_util_FileUtils::mkdir(dirname($byIdRegister));
diff --git a/cache/DataCacheMemcacheService.php b/cache/DataCacheMemcacheService.php
new file mode 100644
index 0000000..183a145
--- /dev/null
+++ b/cache/DataCacheMemcacheService.php
@@ -0,0 +1,299 @@
+<?php
+class f_DataCacheMemcacheService extends f_DataCacheService
+{
+	const MEMCACHE_KEY_PREFIX = 'memcacheDataCache-';
+	const MEMCACHE_REGISTRATION_KEY_PREFIX = 'memcacheDataCacheRegistration-';
+	
+	private static $instance;
+	private static $memcache = null;
+	
+	protected function __construct()
+	{
+		self::$memcache = new Memcache();
+		
+		$config = Framework::getConfiguration("memcache");
+		
+		if (self::$memcache->connect($config["serverDataCacheService"]["host"], $config["serverDataCacheService"]["port"]) === false)
+		{
+			Framework::error("SimpleCache: could not obtain memcache instance");
+		}
+	}
+
+	/**
+	 * @return f_DataCacheService
+	 */
+	public static function getInstance()
+	{
+		if (self::$instance === null)
+		{
+			self::$instance = self::getServiceClassInstance(get_class());
+		}
+		return self::$instance;
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 */
+	public function writeToCache($item)
+	{	
+		$this->register($item);
+		$data = $item->getValues();
+		
+		$data["timestamp"] = time();
+		$data["isValid"] = true;
+		$data["ttl"] = $item->getTTL();
+		
+		$serialized = serialize($data);
+		self::$memcache->set(self::MEMCACHE_KEY_PREFIX.$item->getNamespace().'-'.$item->getKeyParameters(), $serialized, null, $item->getTTL());
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 * @param String $subCache
+	 * @param Boolean $dispatch (optional)
+	 */
+	public final function clearSubCache($item, $subCache, $dispatch = true)
+	{
+		$this->registerShutdown();
+		
+		self::$memcache->delete(self::MEMCACHE_KEY_PREFIX.$item->getNamespace().'-'.$item->getKeyParameters());
+		
+		if (Framework::isDebugEnabled())
+		{
+			Framework::debug(__METHOD__ . ' ' . $item->getNamespace().'-'.$item->getKeyParameters().' : '.$subCache);
+		}
+		
+		if (!array_key_exists($item->getNamespace(), $this->idToClear))
+		{
+			$this->idToClear[$item->getNamespace()] = array($item->getKeyParameters() => $subCache);
+		}
+		else if (is_array($this->idToClear[$item->getNamespace()]))
+		{
+			$this->idToClear[$item->getNamespace()][$item->getKeyParameters()] = $subCache;
+		}
+
+		$this->dispatch = $dispatch || $this->dispatch;
+	}
+	
+	protected function commitClear()
+	{
+		if (Framework::isDebugEnabled())
+		{
+			Framework::debug("SimpleCache->commitClear");
+		}
+		if ($this->clearAll)
+		{
+			if (Framework::isDebugEnabled())
+			{
+				Framework::debug("Clear all");
+			}
+			self::$memcache->flush();
+			if ($this->dispatch)
+			{
+				f_event_EventManager::dispatchEvent('simpleCacheCleared', null);
+			}
+		}
+		else
+		{
+			if (!empty($this->idToClear))
+			{
+				$ids = array();
+				foreach ($this->idToClear as $id => $value)
+				{
+					$ids[] = $id;
+				}
+				self::buildInvalidCacheList($ids);
+			}
+			if (!empty($this->docIdToClear))
+			{
+				self::commitClearByDocIds($this->docIdToClear);
+			}
+			
+			if ($this->dispatch)
+			{
+				if ($this->idToClear === null)
+				{
+					$this->idToClear = array();
+				}
+				if ($this->docIdToClear === null)
+				{
+					$this->docIdToClear = array();
+				}
+				f_event_EventManager::dispatchEvent('simpleCacheCleared', null, array_merge($this->idToClear, $this->docIdToClear));
+			}
+		}
+		
+		$this->clearAll = false;
+		$this->idToClear = null;
+		$this->docIdToClear = null;
+	}
+
+	/**
+	 * @param Array $docIds
+	 */
+	protected function commitClearByDocIds($docIds)
+	{
+		foreach ($docIds as $id)
+		{
+			$keys = self::$memcache->get(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$id);
+			if ($keys !== false)
+			{
+				$keyParameters = unserialize($keys);
+				foreach ($keyParameters as $k)
+				{
+					self::$memcache->delete(self::MEMCACHE_KEY_PREFIX.$k);
+				}
+			}
+		}
+	}
+
+	/**
+	 * @param Array $dirsToClear
+	 */
+	protected function buildInvalidCacheList($dirsToClear)
+	{
+		foreach ($dirsToClear as $id)
+		{
+			$object = self::$memcache->get(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$id);
+			$object = unserialize($object);
+			if ($object === false)
+			{
+				$object = array();
+			}
+			foreach ($object as $keyParameters)
+			{
+				self::$memcache->delete(self::MEMCACHE_KEY_PREFIX.$id.'-'.$keyParameters);
+			}
+		}
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 */
+	protected function register($item)
+	{
+		if (!$this->isRegistered($item))
+		{	
+			self::$memcache->set(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$item->getNamespace(), serialize(array()), null, 0);
+			
+			foreach ($this->optimizeCacheSpecs($item->getPatterns()) as $pattern)
+			{
+				$object = self::$memcache->get(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$pattern);
+				$object = unserialize($object);
+				if ($object === false)
+				{
+					$object = array();
+				}
+				array_push($object, $item->getNamespace());
+				
+				$serialized = serialize($object);
+				self::$memcache->set(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$pattern, $serialized, null, 0);
+				
+				$object = null;
+				$serialized = null;
+			}
+		}
+		
+		if (!$this->isRegistered($item, null, $item->getKeyParameters()))
+		{	
+			$object = self::$memcache->get(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$item->getNamespace());
+			
+			$object = unserialize($object);
+			if ($object === false)
+				{
+					$object = array();
+				}
+			array_push($object, $item->getKeyParameters());
+				
+			$serialized = serialize($object);
+			self::$memcache->set(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$item->getNamespace(), $serialized, null, 0);
+			
+			$object = null;
+			$serialized = null;
+		}
+	
+		foreach ($item->getPatterns() as $spec)
+		{
+			if (is_numeric($spec))
+			{
+				$object = self::$memcache->get(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$spec);
+				
+				$object = unserialize($object);
+				$object[] = $item->getNamespace().'-'.$item->getKeyParameters();
+				
+				$serialized = serialize($object);
+				self::$memcache->set(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$spec, $serialized, null, 0);
+				
+				$object = null;
+				$serialized = null;
+			}
+		}
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 * @param unknown_type $spec
+	 * @param unknown_type $keyParameters
+	 * @return Boolean
+	 */
+	protected function isRegistered($item, $spec = null, $keyParameters = null)
+	{
+		if ($spec === null && $keyParameters === null)
+		{
+			$object = self::$memcache->get(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$item->getNamespace());
+		
+			return ($object !== false);
+		}
+		
+		if ($spec === null && $keyParameters !== null)
+		{
+			$object = self::$memcache->get(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$item->getNamespace());
+			if ($object === false)
+			{
+				return false;
+			}
+			$object = unserialize($object);
+			return (in_array($keyParameters, $object));
+		}
+		
+		$object = self::$memcache->get(self::MEMCACHE_REGISTRATION_KEY_PREFIX.$spec);
+		
+		return ($object !== false);
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 * @return f_DataCacheItem
+	 */
+	protected function getData($item)
+	{
+		$object = self::$memcache->get(self::MEMCACHE_KEY_PREFIX.$item->getNamespace().'-'.$item->getKeyParameters());
+		
+		if ($object !== false)
+		{
+			$object = unserialize($object);
+			
+			foreach ($object as $k => $v)
+			{
+				if ($k == "isValid")
+				{
+					$item->setValidity($v);
+					continue;
+				}
+				if ($k == "timestamp")
+				{
+					$item->setCreationTime($v);
+					continue;
+				}
+				if ($k == "ttl")
+				{
+					$item->setTTL($v);
+					continue;
+				}
+				$item->setValue($k, $v);
+			}
+		}
+		return $item;
+	}
+}
+?>
\ No newline at end of file
diff --git a/cache/DataCacheMongoService.php b/cache/DataCacheMongoService.php
index e924baf..5417d4d 100755
--- a/cache/DataCacheMongoService.php
+++ b/cache/DataCacheMongoService.php
@@ -17,7 +17,7 @@ class f_DataCacheMongoService extends f_DataCacheService
 			$connectionString .= $config["authentication"]["username"].':'.$config["authentication"]["password"].'@';
 		}
 		
-		$connectionString .= implode(",", $config["serversSimpleCache"]);
+		$connectionString .= implode(",", $config["serversDataCacheService"]);
 		
 		if ($connectionString != null)
 		{
@@ -49,34 +49,6 @@ class f_DataCacheMongoService extends f_DataCacheService
 	}
 	
 	/**
-	 * @param String $namespace
-	 * @param Mixed $keyParameters
-	 * @param String $subCache (optional)
-	 * @param Array	$newPatterns
-	 * @return f_DataCacheItem or null or String
-	 */
-	public function readFromCache($namespace, $keyParameters, $newPatterns = null)
-	{
-		if ($newPatterns !== null)
-		{
-			$returnItem = true;
-		}
-		else 
-		{
-			$returnItem = false;
-			$newPatterns = array();
-		}
-		
-		$item = $this->getData($this->getNewCacheItem($namespace, $keyParameters, $newPatterns));
-		
-		if ($this->exists($item) || $returnItem)
-		{
-			return $item;
-		}
-		return null;
-	}
-	
-	/**
 	 * @param f_DataCacheItem $item
 	 */
 	public function writeToCache($item)
@@ -100,35 +72,6 @@ class f_DataCacheMongoService extends f_DataCacheService
 		}
 	}
 	
-	/**
-	 * @param f_DataCacheItem $item
-	 * @param String $subCache
-	 * @return Boolean
-	 */
-	public function exists($item, $subCache = null)
-	{
-		$result = $item->isValid();
-		if ($subCache !== null)
-		{
-			$subResult = $item->getValue($subCache) !== null;
-		}
-		else 
-		{
-			$subResult = true;
-		}
-		return $result && $subResult;
-	}
-	
-	/**
-	 * This is the same as BlockCache::commitClear()
-	 * but designed for the context of <code>register_shutdown_function()</code>,
-	 * to be sure the correct umask is used.
-	 */
-	public function shutdownCommitClear()
-	{
-		$this->commitClear();
-	}
-	
 	public function cleanExpiredCache()
 	{
 		try
@@ -179,7 +122,7 @@ class f_DataCacheMongoService extends f_DataCacheService
 		$this->dispatch = $dispatch || $this->dispatch;
 	}
 	
-	private function commitClear()
+	protected function commitClear()
 	{
 		if (Framework::isDebugEnabled())
 		{
@@ -235,7 +178,7 @@ class f_DataCacheMongoService extends f_DataCacheService
 	/**
 	 * @param Array $docIds
 	 */
-	private function commitClearByDocIds($docIds)
+	protected function commitClearByDocIds($docIds)
 	{
 		try
 		{
@@ -253,7 +196,7 @@ class f_DataCacheMongoService extends f_DataCacheService
 	/**
 	 * @param Array $dirsToClear
 	 */
-	private function buildInvalidCacheList($dirsToClear)
+	protected function buildInvalidCacheList($dirsToClear)
 	{
 		try
 		{
@@ -271,7 +214,7 @@ class f_DataCacheMongoService extends f_DataCacheService
 	/**
 	 * @param f_DataCacheItem $item
 	 */
-	private function register($item)
+	protected function register($item)
 	{
 		if (!$this->isRegistered($item))
 		{	
@@ -305,7 +248,7 @@ class f_DataCacheMongoService extends f_DataCacheService
 		}
 	}
 	
-	private function isRegistered($item, $id = null, $keyParameters = null)
+	protected function isRegistered($item, $id = null, $keyParameters = null)
 	{
 		if ($id === null && $keyParameters === null)
 		{
@@ -337,7 +280,7 @@ class f_DataCacheMongoService extends f_DataCacheService
 	 * @param f_DataCacheItem $item
 	 * @return f_DataCacheItem
 	 */
-	private function getData($item)
+	protected function getData($item)
 	{
 		try
 		{
diff --git a/cache/DataCacheRedisService.php b/cache/DataCacheRedisService.php
new file mode 100644
index 0000000..c58775c
--- /dev/null
+++ b/cache/DataCacheRedisService.php
@@ -0,0 +1,264 @@
+<?php
+class f_DataCacheRedisService extends f_DataCacheService
+{
+	const REDIS_KEY_PREFIX = 'redisDataCache-';
+	const REDIS_REGISTRATION_KEY_PREFIX = 'redisDataCacheRegistration-';
+	
+	private static $instance;
+	private static $redis = null;
+	
+	protected function __construct()
+	{
+		self::$redis = new Redis();
+			
+		$config = Framework::getConfiguration("redis");
+		
+		self::$redis->connect($config["serverDataCacheService"]["host"], $config["serverDataCacheService"]["port"]);
+		
+		if (isset($config["authentication"]["password"]) && $config["authentication"]["password"] !== '')
+		{
+			self::$redis->auth($config["authentication"]["password"]);
+		}
+		
+		self::$redis->select($config["serverDataCacheService"]["database"]);
+	}
+
+	/**
+	 * @return f_DataCacheService
+	 */
+	public static function getInstance()
+	{
+		if (self::$instance === null)
+		{
+			self::$instance = self::getServiceClassInstance(get_class());
+		}
+		return self::$instance;
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 */
+	public function writeToCache($item)
+	{	
+		$this->register($item);
+		$data = $item->getValues();
+		
+		$data["timestamp"] = time();
+		$data["isValid"] = true;
+		$data["ttl"] = $item->getTTL();
+		
+		$serialized = serialize($data);
+		self::$redis->set(self::REDIS_KEY_PREFIX.$item->getNamespace().'-'.$item->getKeyParameters(), $serialized);
+		
+		self::$redis->setTimeout(self::REDIS_KEY_PREFIX.$item->getNamespace().'-'.$item->getKeyParameters(), $item->getTTL());
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 * @param String $subCache
+	 * @param Boolean $dispatch (optional)
+	 */
+	public final function clearSubCache($item, $subCache, $dispatch = true)
+	{
+		$this->registerShutdown();
+		
+		self::$redis->delete(self::REDIS_KEY_PREFIX.$item->getNamespace().'-'.$item->getKeyParameters());
+		
+		if (Framework::isDebugEnabled())
+		{
+			Framework::debug(__METHOD__ . ' ' . $item->getNamespace().'-'.$item->getKeyParameters().' : '.$subCache);
+		}
+		
+		if (!array_key_exists($item->getNamespace(), $this->idToClear))
+		{
+			$this->idToClear[$item->getNamespace()] = array($item->getKeyParameters() => $subCache);
+		}
+		else if (is_array($this->idToClear[$item->getNamespace()]))
+		{
+			$this->idToClear[$item->getNamespace()][$item->getKeyParameters()] = $subCache;
+		}
+
+		$this->dispatch = $dispatch || $this->dispatch;
+	}
+	
+	protected function commitClear()
+	{
+		if (Framework::isDebugEnabled())
+		{
+			Framework::debug("SimpleCache->commitClear");
+		}
+		if ($this->clearAll)
+		{
+			if (Framework::isDebugEnabled())
+			{
+				Framework::debug("Clear all");
+			}
+			$keys = self::$redis->getKeys(self::REDIS_KEY_PREFIX.'*');
+			if (!is_array($keys))
+			{
+				$keys = array();
+			}
+			self::$redis->delete($keys);	
+			if ($this->dispatch)
+			{
+				f_event_EventManager::dispatchEvent('simpleCacheCleared', null);
+			}
+		}
+		else
+		{
+			if (!empty($this->idToClear))
+			{
+				$ids = array();
+				foreach ($this->idToClear as $id => $value)
+				{
+					$ids[] = $id;
+				}
+				self::buildInvalidCacheList($ids);
+			}
+			if (!empty($this->docIdToClear))
+			{
+				self::commitClearByDocIds($this->docIdToClear);
+			}
+			
+			if ($this->dispatch)
+			{
+				if ($this->idToClear === null)
+				{
+					$this->idToClear = array();
+				}
+				if ($this->docIdToClear === null)
+				{
+					$this->docIdToClear = array();
+				}
+				f_event_EventManager::dispatchEvent('simpleCacheCleared', null, array_merge($this->idToClear, $this->docIdToClear));
+			}
+		}
+		
+		$this->clearAll = false;
+		$this->idToClear = null;
+		$this->docIdToClear = null;
+	}
+
+	/**
+	 * @param Array $docIds
+	 */
+	protected function commitClearByDocIds($docIds)
+	{
+		$keys = self::$redis->getMultiple($docIds);
+		$keyParameters = array();
+		foreach ($keys as $k)
+		{
+			$a = unserialize($k);
+			$keyParameters[] = self::REDIS_KEY_PREFIX.$a["keyParameters"];
+		}
+		self::$redis->delete($keyParameters);
+	}
+
+	/**
+	 * @param Array $dirsToClear
+	 */
+	protected function buildInvalidCacheList($dirsToClear)
+	{
+		$keys = array();
+		
+		foreach ($dirsToClear as $id)
+		{
+			$keys = array_merge($keys, self::$redis->getKeys(self::REDIS_KEY_PREFIX.$id.'-*'));
+		}
+		self::$redis->delete($keys);
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 */
+	protected function register($item)
+	{
+		if (!$this->isRegistered($item))
+		{	
+			$object = self::$redis->get(self::REDIS_REGISTRATION_KEY_PREFIX.$item->getNamespace());
+			if ($object !== false)
+			{
+				$object = unserialize($object);
+			}
+			$object["pattern"] = $this->optimizeCacheSpecs($item->getPatterns());
+			
+			$serialized = serialize($object);
+			self::$redis->set(self::REDIS_REGISTRATION_KEY_PREFIX.$item->getNamespace(), $serialized);
+			
+			$object = null;
+			$serialized = null;
+		}
+	
+		foreach ($item->getPatterns() as $spec)
+		{
+			if (is_numeric($spec))
+			{
+				$object = self::$redis->get(self::REDIS_REGISTRATION_KEY_PREFIX.$spec);
+				if ($object !== false)
+				{
+					$object = unserialize($object);
+				}
+				$object["keyParameters"] = $item->getNamespace().'-'.$item->getKeyParameters();
+				
+				$serialized = serialize($object);
+				self::$redis->set(self::REDIS_REGISTRATION_KEY_PREFIX.$spec, $serialized);
+				
+				$object = null;
+				$serialized = null;
+			}
+		}
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 * @param unknown_type $id
+	 * @param unknown_type $keyParameters
+	 * @return Boolean
+	 */
+	protected function isRegistered($item, $id = null, $keyParameters = null)
+	{
+		if ($id === null && $keyParameters === null)
+		{
+			$object = self::$redis->get(self::REDIS_REGISTRATION_KEY_PREFIX.$item->getNamespace());
+		
+			return ($object !== false);
+		}
+		return false;
+	}
+	
+	/**
+	 * @param f_DataCacheItem $item
+	 * @return f_DataCacheItem
+	 */
+	protected function getData($item)
+	{
+		$object = self::$redis->get(self::REDIS_KEY_PREFIX.$item->getNamespace().'-'.$item->getKeyParameters());
+		
+		if ($object !== false)
+		{
+			$object = unserialize($object);
+			
+			foreach ($object as $k => $v)
+			{
+				if ($k == "isValid")
+				{
+					$item->setValidity($v);
+					continue;
+				}
+				if ($k == "timestamp")
+				{
+					$item->setCreationTime($v);
+					continue;
+				}
+				if ($k == "ttl")
+				{
+					$item->setTTL($v);
+					continue;
+				}
+				$item->setValue($k, $v);
+			}
+		}
+		return $item;
+	}
+}
+?>
\ No newline at end of file
diff --git a/cache/DataCacheService.class.php b/cache/DataCacheService.class.php
index f05060e..32fa1cd 100755
--- a/cache/DataCacheService.class.php
+++ b/cache/DataCacheService.class.php
@@ -40,7 +40,7 @@ class f_DataCacheService extends BaseService
 	/**
 	 * @return Boolean
 	 */
-	function isEnabled()
+	public function isEnabled()
 	{
 		return !defined("DISABLE_DATACACHE") || constant("DISABLE_DATACACHE") !== true;
 	}
@@ -50,15 +50,25 @@ class f_DataCacheService extends BaseService
 	 * @param Mixed $keyParameters
 	 * @param String $subCache (optional)
 	 * @param Array	$newPatterns
-	 * @return f_DataCacheItem or null
+	 * @return f_DataCacheItem or null or String
 	 */
 	public function readFromCache($namespace, $keyParameters, $newPatterns = null)
 	{
 		if ($newPatterns !== null)
 		{
-			$cacheItem = $this->getNewCacheItem($namespace, $keyParameters, $newPatterns);
-			$cacheItem->setInvalid();
-			return $cacheItem;
+			$returnItem = true;
+		}
+		else 
+		{
+			$returnItem = false;
+			$newPatterns = array();
+		}
+		
+		$item = $this->getData($this->getNewCacheItem($namespace, $keyParameters, $newPatterns));
+		
+		if ($returnItem || $this->exists($item))
+		{
+			return $item;
 		}
 		return null;
 	}
@@ -78,7 +88,16 @@ class f_DataCacheService extends BaseService
 	 */
 	public function exists($item, $subCache = null)
 	{
-		return false;
+		$result = $item->isValid();
+		if ($subCache !== null)
+		{
+			$subResult = $item->getValue($subCache) !== null;
+		}
+		else 
+		{
+			$subResult = true;
+		}
+		return $result && $subResult;
 	}
 	
 	/**
@@ -149,7 +168,7 @@ class f_DataCacheService extends BaseService
 	
 	public function cleanExpiredCache()
 	{
-		
+		return true;
 	}
 	
 	/**
@@ -163,6 +182,16 @@ class f_DataCacheService extends BaseService
 	}
 	
 	/**
+	 * @param f_DataCacheItem $item
+	 * @param String $subCache
+	 * @param Boolean $dispatch (optional)
+	 */
+	public function clearSubCache($item, $subCache, $dispatch = true)
+	{
+		return true;
+	}
+	
+	/**
 	 * @param Array $cacheSpecs
 	 * @return Array
 	 */
@@ -259,25 +288,14 @@ class f_DataCacheService extends BaseService
 		$this->dispatch = false;
 	}
 	
-	/*private function commitClear()
-	{
-		
-	}*/
-
 	/**
-	 * @param Array $docIds
-	 */
-	/*private function commitClearByDocIds($docIds)
-	{
-		
-	}*/
-	
-	/**
-	 * @param Array $dirsToClear
+	 * @param f_DataCacheItem $item
+	 * @return f_DataCacheItem
 	 */
-	/*private function buildInvalidCacheList($dirsToClear)
+	protected function getData($item)
 	{
-		
-	}*/
+		$item->setValidity(false);
+		return $item;
+	}
 }
 ?>
\ No newline at end of file
diff --git a/cache/SimpleCache.class.php b/cache/SimpleCache.class.php
index 3387319..a6b2803 100755
--- a/cache/SimpleCache.class.php
+++ b/cache/SimpleCache.class.php
@@ -490,4 +490,133 @@ class f_SimpleCache
 	{
 		return f_persistentdocument_PersistentProvider::getInstance();
 	}
+}
+
+class f_SimpleCacheReplacement
+{
+	/**
+	 * @var f_DataCacheItem
+	 */
+	private $cacheItem = null;
+
+	public function __construct($id, $keyParameters, $cacheSpecs)
+	{
+		$this->cacheItem = f_DataCacheService::getInstance()->readFromCache($id, $keyParameters, $cacheSpecs);
+	}
+	
+	/**
+	 * @param Integer $timeLimit max time to live, in seconds
+	 */
+	private function setTimeLimit($timeLimit)
+	{
+		$this->cacheItem->setTTL($timeLimit);
+	}
+
+	static function isEnabled()
+	{
+		return f_DataCacheService::getInstance()->isEnabled();
+	}
+
+	public function exists($subCache)
+	{
+		f_DataCacheService::getInstance()->exists($this->cacheItem, $subCache);
+	}
+
+	public function setInvalid()
+	{
+		$this->cacheItem->setInvalid();
+	}
+
+	public function readFromCache($subCache)
+	{
+		return $this->cacheItem->getValue($subCache);
+	}
+
+	public function writeToCache($subCache, $content)
+	{
+		$this->cacheItem->setValue($subCache, $content);
+		f_DataCacheService::getInstance()->writeToCache($this->cacheItem);
+	}
+
+	public function getCachePath($subCache)
+	{
+		$this->cacheItem->getCachePath();
+	}
+
+	public static function clearCacheById($id)
+	{
+		f_DataCacheService::getInstance()->clearCacheByNamespace($id);
+	}
+
+	static function commitClearByDocIds($docIds)
+	{
+		foreach ($docIds as $id)
+		{
+			f_DataCacheService::getInstance()->clearCacheByDocId($id);
+		}
+	}
+
+	/**
+	 * @param String $id
+	 */
+	public static function clear($id = null, $dispatch = true)
+	{
+		if ($id === null)
+		{
+			f_DataCacheService::getInstance()->clearAll();
+		}
+		else 
+		{
+			f_DataCacheService::getInstance()->clearCacheByNamespace($id);
+		}
+	}
+
+
+	public final function clearSubCache($subCache, $dispatch = true)
+	{
+		f_DataCacheService::getInstance()->clearSubCache($this->cacheItem, $subCache, $dispatch);
+	}
+
+	/**
+	 * This is the same as BlockCache::commitClear()
+	 * but designed for the context of <code>register_shutdown_function()</code>,
+	 * to be sure the correct umask is used.
+	 */
+	public static function shutdownCommitClear()
+	{
+		f_DataCacheService::getInstance()->shutdownCommitClear();
+	}
+
+	public static function commitClearDispatched($ids = null)
+	{
+		return true;
+	}
+
+	/**
+	 */
+	public static function commitClear()
+	{
+		return true;
+	}
+
+	public static function cleanExpiredCache()
+	{
+		f_DataCacheService::getInstance()->cleanExpiredCache();
+	}
+
+	/**
+	 * @param f_persistentdocument_PersistentDocumentModel $model
+	 */
+	public static function clearCacheByModel($model)
+	{
+		f_DataCacheService::getInstance()->clearCacheByModel($model);
+	}
+
+	/**
+	 * @param f_persistentdocument_PersistentDocumentModel $model
+	 */
+	public static function clearCacheByTag($tag)
+	{
+		f_DataCacheService::getInstance()->clearCacheByTag($tag);
+	}
 }
\ No newline at end of file
diff --git a/listener/SimpleCacheListener.class.php b/listener/SimpleCacheListener.class.php
index 6988400..1d1404d 100755
--- a/listener/SimpleCacheListener.class.php
+++ b/listener/SimpleCacheListener.class.php
@@ -20,7 +20,7 @@ class listener_SimpleCacheListener
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentUpdated");}
 		$document = $params['document'];
 		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
-		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
+		f_DataCacheService::getInstance()->clearCacheByDocId(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 	
 	/**
@@ -60,7 +60,7 @@ class listener_SimpleCacheListener
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentDeleted");}
 		$document = $params['document'];
 		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
-		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
+		f_DataCacheService::getInstance()->clearCacheByDocId(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -72,7 +72,7 @@ class listener_SimpleCacheListener
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentPublished");}
 		$document = $params['document'];
 		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
-		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
+		f_DataCacheService::getInstance()->clearCacheByDocId(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -84,7 +84,7 @@ class listener_SimpleCacheListener
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentDeactivated");}
 		$document = $params['document'];
 		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
-		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
+		f_DataCacheService::getInstance()->clearCacheByDocId(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -96,7 +96,7 @@ class listener_SimpleCacheListener
 		if (Framework::isDebugEnabled()) Framework::debug("[". __CLASS__ . "]: onPersistentDocumentUnPublished");
 		$document = $params['document'];
 		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
-		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
+		f_DataCacheService::getInstance()->clearCacheByDocId(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -108,7 +108,7 @@ class listener_SimpleCacheListener
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentFiled");}
 		$document = $params['document'];
 		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
-		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
+		f_DataCacheService::getInstance()->clearCacheByDocId(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -120,7 +120,7 @@ class listener_SimpleCacheListener
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentInTrash");}
 		$document = $params['document'];
 		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
-		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
+		f_DataCacheService::getInstance()->clearCacheByDocId(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -132,7 +132,7 @@ class listener_SimpleCacheListener
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onChildrenOrdered");}
 		$document = $params['parent'];
 		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
-		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
+		f_DataCacheService::getInstance()->clearCacheByDocId(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 	
 	public function onPersistentTreeNodeOrdered($sender, $params)
@@ -141,7 +141,7 @@ class listener_SimpleCacheListener
 		$parentNode = $params['parentNode'];
 		$document = DocumentHelper::getDocumentInstance($parentNode->getId());
 		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
-		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
+		f_DataCacheService::getInstance()->clearCacheByDocId(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 	
     public function onSimpleCacheClearedNode($sender, $params)
@@ -151,16 +151,16 @@ class listener_SimpleCacheListener
 		{
 			if (isset($params['ids']))
 			{
-		    	f_DataCacheService::getInstance()->commitClearDispatched($params['ids']);
+		    	f_DataCacheService::getInstance()->clearCacheByNamespace($params['ids']);
 			}
 			if (isset($params['docIds']))
 			{
-		    	f_DataCacheService::getInstance()->commitClearByDocIds($params['docIds']);
+		    	f_DataCacheService::getInstance()->clearCacheByDocId($params['docIds']);
 			}
 		}
 		else
 		{
-		    f_DataCacheService::getInstance()->commitClearDispatched();
+		    f_DataCacheService::getInstance()->clearAll();
 		}
     }
     
-- 
1.7.0.4

