From f421945838c59a8a6e8542e9ec8cd29ae285de31 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?K=C3=A9vin=20O'NEILL?= <kevin.oneill@rbs.fr>
Date: Fri, 23 Jul 2010 17:06:07 +0200
Subject: [PATCH 2/4] implementation DataCacheFileService

---
 cache/DataCacheFileService.class.php   |  248 +++++++++++++++++++++++++++-----
 cache/DataCacheItem.class.php          |   52 ++++++-
 cache/DataCacheItemImpl.class.php      |   74 ++++++++---
 cache/DataCacheService.class.php       |  164 ++++++++++++++++++++-
 listener/SimpleCacheListener.class.php |   70 ++++------
 5 files changed, 501 insertions(+), 107 deletions(-)

diff --git a/cache/DataCacheFileService.class.php b/cache/DataCacheFileService.class.php
index 60a1e8c..5eece9d 100755
--- a/cache/DataCacheFileService.class.php
+++ b/cache/DataCacheFileService.class.php
@@ -3,9 +3,10 @@ class f_DataCacheFileService extends f_DataCacheService
 {
 	const INVALID_CACHE_ENTRY = 'invalidCacheEntry';
 	
+	private static $instance;
 	private $registrationFolder = null;
 	
-	private function __construct()
+	protected function __construct()
 	{
 		$this->registrationFolder = f_util_FileUtils::buildCachePath('simplecache', 'registration');
 		f_util_FileUtils::mkdir($this->registrationFolder);
@@ -26,8 +27,9 @@ class f_DataCacheFileService extends f_DataCacheService
 	/**
 	 * @param String $namespace
 	 * @param Mixed $keyParameters
+	 * @param String $subCache (optional)
 	 * @param Array	$newPatterns
-	 * @return f_DataCacheItem or null
+	 * @return f_DataCacheItem or null or String
 	 */
 	public function readFromCache($namespace, $keyParameters, $newPatterns = null)
 	{
@@ -44,15 +46,20 @@ class f_DataCacheFileService extends f_DataCacheService
 		
 		if ($this->exists($item))
 		{
-			$subCaches = f_util_FileUtils::getDirFiles($this->getCachePath($item));
+			$dirPath = $this->getCachePath($item);
+			$subCaches = f_util_FileUtils::getDirFiles($dirPath);
+			if (f_util_ArrayUtils::isNotEmpty($subCaches))
+			{
+				$item->setCreationTime(filemtime($dirPath));
+			}
 			if ($subCaches != null)
 			{
 				foreach ($subCaches as $subCache)
 				{
 					$item->setValue(basename($subCache), f_util_FileUtils::read($subCache));
 				}
-				return $item;
 			}
+			return $item;
 		}
 		return ($returnItem) ? $item : null;
 	}
@@ -60,17 +67,17 @@ class f_DataCacheFileService extends f_DataCacheService
 	/**
 	 * @param f_DataCacheItem $item
 	 */
-	public function writeToCache(f_DataCacheItem $item)
+	public function writeToCache($item)
 	{
 		$this->register($item);
-		$data = $item->getValue();
+		$data = $item->getValues();
 		try
 		{
 			foreach ($data as $k => $v)
 			{
-				if ($k != "creationTime" || $k != "isValid" || $k != "cachePath" || $v !== null)
+				if ($v !== null)
 				{
-					f_util_FileUtils::writeAndCreateContainer($this->getCachePath($item, $k), $v, f_util_FileUtils::OVERRIDE);
+					f_util_FileUtils::write($this->getCachePath($item, $k), $v, f_util_FileUtils::OVERRIDE);
 				}
 			}
 		}
@@ -86,41 +93,201 @@ class f_DataCacheFileService extends f_DataCacheService
 	}
 	
 	/**
-	 * @param String $pattern
+	 * @param f_DataCacheItem $item
+	 * @param String $subCache
+	 * @return Boolean
 	 */
-	public function clearCacheByPattern($pattern)
+	public function exists($item, $subCache = null)
+	{
+		$cachePath = $this->getCachePath($item, $subCache);
+		$subCaches = f_util_FileUtils::getDirFiles($cachePath);
+		$result = file_exists($cachePath) && $subCaches !== null && $this->isValid($item)
+			&& ($item->getTTL() === null || (time() - filemtime($cachePath)) < $item->getTTL()); 
+		$this->markAsBeingRegenerated($item);
+		return $result;
+	}
+	
+	
+	/**
+	 * This is the same as BlockCache::commitClear()
+	 * but designed for the context of <code>register_shutdown_function()</code>,
+	 * to be sure the correct umask is used.
+	 */
+	public function shutdownCommitClear()
+	{
+		umask(0002);
+		$this->commitClear();
+	}
+	
+	public function cleanExpiredCache()
 	{
-		$cacheIds = $this->getPersistentProvider()->getCacheIdsByPattern($pattern);
-		foreach ($cacheIds as $cacheId)
+		$directoryIterator = new DirectoryIterator(f_util_FileUtils::buildChangeCachePath('simplecache'));
+		foreach ($directoryIterator as $classNameDir)
 		{
-			if (Framework::isDebugEnabled())
+			if ($classNameDir->isDir())
 			{
-				Framework::debug("[". __CLASS__ . "]: clear $cacheId cache");
+				$subDirIterator = new DirectoryIterator($classNameDir->getPathname());
+				foreach ($subDirIterator as $cacheKeyDir)
+				{
+					$invalidCacheFilePath = $cacheKeyDir->getPathname() . DIRECTORY_SEPARATOR . self::INVALID_CACHE_ENTRY;
+					if ($cacheKeyDir->isDir() && file_exists($invalidCacheFilePath))
+					{
+						$fileInfo = new SplFileInfo($invalidCacheFilePath);
+						if (abs(date_Calendar::getInstance()->getTimestamp() - $fileInfo->getMTime()) > self::MAX_TIME_LIMIT)
+						{
+							f_util_FileUtils::rmdir($cacheKeyDir->getPathname());
+						}
+					}
+				}
 			}
-			self::clear($cacheId);
 		}
 	}
 	
 	/**
-	 * @param String $namespace
+	 * @param f_DataCacheItem $item
+	 * @param String $subCache
+	 * @param Boolean $dispatch (optional)
 	 */
-	public function clearCacheByNamespace($namespace)
+	public final function clearSubCache($item, $subCache, $dispatch = true)
 	{
-		
+		$this->registerShutdown();
+		$cachePath = $this->getCachePath($item, $subCache);
+		if (Framework::isDebugEnabled())
+		{
+			Framework::debug(__METHOD__ . ' ' . $cachePath);
+		}
+		if (!array_key_exists($item->getNamespace(), $this->idToClear))
+		{
+			$this->idToClear[$item->getNamespace()] = array($item->getKeyParameters() => $subCache);
+		}
+		else if (is_array($this->idToClear[$item->getNamespace()]))
+		{
+			$this->idToClear[$item->getNamespace()][$item->getKeyParameters()] = $subCache;
+		}
+
+		$this->dispatch = $dispatch || $this->dispatch;
 	}
+	
+	private function commitClear()
+	{
+		if (Framework::isDebugEnabled())
+		{
+			Framework::debug("DataCacheFileService->commitClear");
+		}
+		$cachePath = f_util_FileUtils::buildCachePath('simplecache');
+		$dirsToClear = array();
+		if ($this->clearAll)
+		{
+			if (Framework::isDebugEnabled())
+			{
+				Framework::debug("Clear all");
+			}
+			$dirHandler = opendir($cachePath);
+			while ($fileName = readdir($dirHandler))
+			{
+				if ($fileName != '.' && $fileName != '..' && $fileName != 'registration' && $fileName != 'old')
+				{
+					$dirsToClear[] = $cachePath . DIRECTORY_SEPARATOR . $fileName;
+				}
+			}
+			$this->buildInvalidCacheList($dirsToClear);
+			closedir($dirHandler);
+			if ($this->dispatch)
+			{
+				f_event_EventManager::dispatchEvent('simpleCacheCleared', null);
+			}
+		}
+		else
+		{
+			$dispatchParams = array();
+			if (!empty($this->idToClear))
+			{
+				foreach ($this->idToClear as $id => $subKey)
+				{
+					if (file_exists($cachePath . DIRECTORY_SEPARATOR . $id))
+					{
+						$dirsToClear[] = $cachePath . DIRECTORY_SEPARATOR . $id;
+					}
+				}
+				$this->buildInvalidCacheList($dirsToClear);
+				if ($this->dispatch)
+				{
+					$dispatchParams["ids"] = $this->idToClear;
+				}
+			}
+			if (!empty($this->docIdToClear))
+			{
+				$this->commitClearByDocIds($this->docIdToClear);
+				if ($this->dispatch)
+				{
+					$dispatchParams["docIds"] = $this->docIdToClear;
+				}
+			}
+			if ($this->dispatch)
+			{
+				f_event_EventManager::dispatchEvent('simpleCacheCleared', null, $dispatchParams);
+			}
+		}
 
-	public function clearAll()
+		$this->clearAll = false;
+		$this->idToClear = null;
+		$this->docIdToClear = null;
+	}
+
+	/**
+	 * @param Array $docIds
+	 */
+	private function commitClearByDocIds($docIds)
 	{
-		
+		foreach ($docIds as $id)
+		{
+			$baseById = $this->registrationFolder.DIRECTORY_SEPARATOR.'byDocId'.DIRECTORY_SEPARATOR.implode(DIRECTORY_SEPARATOR, str_split($id, 3));
+			if (!is_dir($baseById))
+			{
+				continue;
+			}
+			foreach (scandir($baseById) as $dir)
+			{
+				if ($dir == '.' || $dir == '..')
+				{
+					continue;
+				}
+				@touch($baseById.DIRECTORY_SEPARATOR.$dir.DIRECTORY_SEPARATOR.self::INVALID_CACHE_ENTRY);
+			}
+		}
+	}
+
+	/**
+	 * @param Array $dirsToClear
+	 */
+	private function buildInvalidCacheList($dirsToClear)
+	{
+		foreach ($dirsToClear as $dir)
+		{
+			$dirHandler = opendir($dir);
+			while ($fileName = readdir($dirHandler))
+			{
+				if ($fileName != '.' && $fileName != '..' && !file_exists($dir . DIRECTORY_SEPARATOR . $fileName . DIRECTORY_SEPARATOR . self::INVALID_CACHE_ENTRY))
+				{
+					// we ignore errors because the file can disapear
+					@touch($dir . DIRECTORY_SEPARATOR . $fileName . DIRECTORY_SEPARATOR . self::INVALID_CACHE_ENTRY);
+				}
+			}
+			closedir($dirHandler);
+		}
 	}
 	
-	private function getCachePath(f_DataCacheItem $item, $subCache = null)
+	/**
+	 * @param f_DataCacheItem $item
+	 * @return String
+	 */
+	private function getCachePath($item, $subCache = null)
 	{
-		$cachePath = $item->getValue("cachePath");
+		$cachePath = $item->getCachePath();
 		if ($cachePath === null)
 		{
 			$cachePath = f_util_FileUtils::buildCachePath('simplecache', $item->getNamespace(), $item->getKeyParameters());
-			$item->setValue("cachePath", $cachePath);
+			$item->setCachePath($cachePath);
 			f_util_FileUtils::mkdir($cachePath);
 		}
 		if ($subCache === null)
@@ -130,21 +297,19 @@ class f_DataCacheFileService extends f_DataCacheService
 		return $cachePath . DIRECTORY_SEPARATOR . $subCache;
 	}
 	
-	private function exists(f_DataCacheItem $item, $subCache = null)
-	{
-		$cachePath = $this->getCachePath($item, $subCache);
-		$result = file_exists($cachePath) && $this->isValid($item)
-			&& ($item->getTimeLimit() === null || (time() - filemtime($cachePath)) < $item->getTimeLimit()); 
-		$this->markAsBeingRegenerated();
-		return $result;
-	}
-
-	private function isValid(f_DataCacheItem $item)
+	/**
+	 * @param f_DataCacheItem $item
+	 * @return Boolean
+	 */
+	private function isValid($item)
 	{
 		return !file_exists($this->getCachePath($item, self::INVALID_CACHE_ENTRY));
 	}
 	
-	private function markAsBeingRegenerated(f_DataCacheItem $item)
+	/**
+	 * @param f_DataCacheItem $item
+	 */
+	private function markAsBeingRegenerated($item)
 	{
 		if (!$this->isValid($item))
 		{
@@ -152,19 +317,26 @@ class f_DataCacheFileService extends f_DataCacheService
 		}
 	}
 
-	private function getRegistrationPath(f_DataCacheItem $item)
+	/**
+	 * @param f_DataCacheItem $item
+	 * @return String
+	 */
+	private function getRegistrationPath($item)
 	{
-		$registrationPath = $item->getValue("registrationPath");
+		$registrationPath = $item->getRegistrationPath();
 		
 		if ($registrationPath === null)
 		{
 			$registrationPath = $this->registrationFolder . DIRECTORY_SEPARATOR . $item->getNamespace();
-			$item->setValue("registrationPath", $registrationPath);
+			$item->setRegistrationPath($registrationPath);
 		}
 		return $registrationPath;
 	}
 	
-	private function register(f_DataCacheItem $item)
+	/**
+	 * @param f_DataCacheItem $item
+	 */
+	private function register($item)
 	{
 		$registrationPath = $this->getRegistrationPath($item);
 		if (!file_exists($registrationPath))
diff --git a/cache/DataCacheItem.class.php b/cache/DataCacheItem.class.php
index c852de4..7f9392a 100755
--- a/cache/DataCacheItem.class.php
+++ b/cache/DataCacheItem.class.php
@@ -5,11 +5,21 @@ interface f_DataCacheItem
 	 * @return Integer (timestamp) or null
 	 */
 	public function getCreationTime();
+	
+	/**
+	 * @param Integer (timestamp) $timestamp
+	 */
+	public function setCreationTime($timestamp);
 
 	/**
 	 * @param Integer $seconds
 	 */
 	public function setTTL($seconds);
+	
+	/**
+	 * @return Integer
+	 */
+	public function getTTL();
 
 	/**
 	 * @param Mixed $key
@@ -18,29 +28,61 @@ interface f_DataCacheItem
 	public function setValue($key, $value);
 	
 	/**
-	 * @param String $key (optional)
+	 * @param String $key
 	 * @return Mixed
 	 */
 	public function getValue($key);
 	
 	/**
+	 * @param Array $key
+	 */
+	public function setValues($key);
+	
+	/**
+	 * @return Array
+	 */
+	public function getValues();
+	
+	/**
+	 * @param String $key
+	 */
+	public function setRegistrationPath($key);
+	
+	/**
 	 * @return String
 	 */
-	public function getNamespace();
+	public function getRegistrationPath();
+	
+	/**
+	 * @param String $key
+	 */
+	public function setCachePath($key);
 	
 	/**
 	 * @return String
 	 */
-	public function getKeyParameters();
+	public function getCachePath();
 	
 	/**
-	 * @return Integer
+	 * @return String
 	 */
-	public function getTTL();
+	public function getNamespace();
+	
+	/**
+	 * @return String
+	 */
+	public function getKeyParameters();
 	
 	/**
 	 * @return Array
 	 */
 	public function getPatterns();
+	
+	public function setInvalid();
+	
+	/**
+	 * @return Boolean
+	 */
+	public function isValid();
 }
 ?>
\ No newline at end of file
diff --git a/cache/DataCacheItemImpl.class.php b/cache/DataCacheItemImpl.class.php
index 0fb8f8a..7cc5a47 100755
--- a/cache/DataCacheItemImpl.class.php
+++ b/cache/DataCacheItemImpl.class.php
@@ -7,6 +7,10 @@ class f_DataCacheItemImpl implements f_DataCacheItem
 	private $keyParameters;
 	private $patterns;
 	private $timeLimit;
+	private $creationTime = null;
+	private $isValid = false;
+	private $registrationPath = null;
+	private $cachePath = null;
 	private $data;
 		
 	/**
@@ -39,9 +43,9 @@ class f_DataCacheItemImpl implements f_DataCacheItem
 	 */
 	public function getCreationTime()
 	{
-		if (isset($this->data["creationTime"]) && $this->data["creationTime"] != null)
+		if ($this->creationTime !== null)
 		{
-			return $this->data["creationTime"];
+			return $this->creationTime;
 		}
 		return null;
 	}
@@ -81,15 +85,11 @@ class f_DataCacheItemImpl implements f_DataCacheItem
 	/**
 	 * @see f_DataCacheItem::getValue()
 	 *
-	 * @param String $key (optional)
+	 * @param String $key
 	 * @return Mixed
 	 */
-	public function getValue($key = null)
+	public function getValue($key)
 	{
-		if ($key === null)
-		{
-			return $this->data;
-		}
 		if (isset($this->data[$key]) && $this->data[$key] != null)
 		{
 			return $this->data[$key];
@@ -98,6 +98,16 @@ class f_DataCacheItemImpl implements f_DataCacheItem
 	}
 	
 	/**
+	 * @see f_DataCacheItem::getValues()
+	 *
+	 * @return Array
+	 */
+	public function getValues()
+	{
+		return $this->data;
+	}
+	
+	/**
 	 * @see f_DataCacheItem::setTTL()
 	 *
 	 * @param Integer $seconds
@@ -112,23 +122,54 @@ class f_DataCacheItemImpl implements f_DataCacheItem
 	}
 	
 	/**
+	 * @see f_DataCacheItem::setCreationTime()
+	 *
+	 * @param Integer $timestamp
+	 */
+	public function setCreationTime($timestamp)
+	{
+		$this->creationTime = $timestamp;
+	}
+	
+	public function setRegistrationPath($path)
+	{
+		$this->registrationPath = $path;
+	}
+	
+	public function getRegistrationPath()
+	{
+		return $this->registrationPath;
+	}
+	
+	public function setCachePath($path)
+	{
+		$this->cachePath = $path;
+	}
+	
+	public function getCachePath()
+	{
+		return $this->cachePath;
+	}
+	
+	/**
 	 * @see f_DataCacheItem::setValue()
 	 *
-	 * @param Mixed $key
+	 * @param String $key
 	 * @param Mixed $value
 	 */
-	public function setValue($key, $value = null)
+	public function setValue($key, $value)
 	{
-		if ($value === null)
-		{
-			$this->data = $key;
-		}
 		$this->data[$key] = $value;
 	}
 	
+	public function setValues($values)
+	{
+		$this->data = $values;
+	}
+	
 	public function setInvalid()
 	{
-		$this->data["isValid"] = false;
+		$this->isValid = false;
 	}
 	
 	/**
@@ -136,8 +177,7 @@ class f_DataCacheItemImpl implements f_DataCacheItem
 	 */
 	public function isValid()
 	{
-		return (isset($this->data["isValid"]) && $this->data["isValid"] 
-					&& ($this->getCreationTime()+$this->timeLimit > time()));
+		return ($this->isValid	&& ($this->getCreationTime()+$this->timeLimit > time()));
 	}
 }
 ?>
\ No newline at end of file
diff --git a/cache/DataCacheService.class.php b/cache/DataCacheService.class.php
index 10aa4ff..692612f 100755
--- a/cache/DataCacheService.class.php
+++ b/cache/DataCacheService.class.php
@@ -1,10 +1,18 @@
 <?php
 class f_DataCacheService extends BaseService
 {
+	const MAX_TIME_LIMIT = 86400;
+	
 	/**
 	 * @var f_DataCacheService
 	 */
 	private static $instance;
+	
+	protected $clearAll = false;
+	protected $idToClear = array();
+	protected $docIdToClear = array();
+	protected $dispatch = false;
+	protected $shutdownRegistered = false;
 
 	/**
 	 * @return f_DataCacheService
@@ -34,12 +42,13 @@ class f_DataCacheService extends BaseService
 	 */
 	function isEnabled()
 	{
-		return constant("AG_DISABLE_SIMPLECACHE") !== true;
+		return !defined("DISABLE_DATACACHE") || constant("DISABLE_DATACACHE") !== true;
 	}
 	
 	/**
 	 * @param String $namespace
 	 * @param Mixed $keyParameters
+	 * @param String $subCache (optional)
 	 * @param Array	$newPatterns
 	 * @return f_DataCacheItem or null
 	 */
@@ -47,7 +56,9 @@ class f_DataCacheService extends BaseService
 	{
 		if ($newPatterns !== null)
 		{
-			return $this->getNewCacheItem($namespace, $keyParameters, $newPatterns);
+			$cacheItem = $this->getNewCacheItem($namespace, $keyParameters, $newPatterns);
+			$cacheItem->setInvalid();
+			return $cacheItem;
 		}
 		return null;
 	}
@@ -55,17 +66,35 @@ class f_DataCacheService extends BaseService
 	/**
 	 * @param f_DataCacheItem $item
 	 */
-	public function writeToCache(f_DataCacheItem $item)
+	public function writeToCache($item)
 	{
 		
 	}
 	
 	/**
+	 * @param f_DataCacheItem $item
+	 * @param String $subCache
+	 * @return Boolean
+	 */
+	public function exists($item, $subCache = null)
+	{
+		return false;
+	}
+	
+	/**
 	 * @param String $pattern
 	 */
 	public function clearCacheByPattern($pattern)
 	{
-		
+		$cacheIds = $this->getPersistentProvider()->getCacheIdsByPattern($pattern);
+		foreach ($cacheIds as $cacheId)
+		{
+			if (Framework::isDebugEnabled())
+			{
+				Framework::debug("[". __CLASS__ . "]: clear $cacheId cache");
+			}
+			$this->clear($cacheId);
+		}
 	}
 	
 	/**
@@ -73,14 +102,70 @@ class f_DataCacheService extends BaseService
 	 */
 	public function clearCacheByNamespace($namespace)
 	{
-		
+		$this->clear($namespace);
+	}
+	
+	/**
+	 * @param String $id
+	 */
+	public function clearCacheByDocId($id)
+	{
+		$this->registerShutdown();
+		$this->docIdToClear[] = $id;
+	}
+	
+	/**
+	 * @param f_persistentdocument_PersistentDocumentModel $model
+	 */
+	public function clearCacheByModel($model)
+	{
+		if (Framework::isDebugEnabled())
+		{
+			Framework::debug("[". __CLASS__ . "]: clear cache by model:".$model->getName());
+		}
+		$this->clearCacheByPattern($model->getName());
+		if ($model->isInjectedModel())
+		{
+			$this->clearCacheByPattern($model->getOriginalModelName());
+		}
+	}
+
+	/**
+	 * @param String $tag
+	 */
+	public function clearCacheByTag($tag)
+	{
+		if (Framework::isDebugEnabled())
+		{
+			Framework::debug("[". __CLASS__ . "]: clear cache by tag:$tag");
+		}
+		$this->clearCacheByPattern(f_DataCachePatternHelper::getTagPattern($tag));
 	}
 
 	public function clearAll()
 	{
+		$this->clear();
+	}
+	
+	public function cleanExpiredCache()
+	{
 		
 	}
 	
+	/**
+	 * This is the same as BlockCache::commitClear()
+	 * but designed for the context of <code>register_shutdown_function()</code>,
+	 * to be sure the correct umask is used.
+	 */
+	public function shutdownCommitClear()
+	{
+		$this->commitClear();
+	}
+	
+	/**
+	 * @param Array $cacheSpecs
+	 * @return Array
+	 */
 	protected function optimizeCacheSpecs($cacheSpecs)
 	{
 		if (f_util_ArrayUtils::isNotEmpty($cacheSpecs))
@@ -125,5 +210,74 @@ class f_DataCacheService extends BaseService
 		}
 		return array();
 	}
+	
+	protected function registerShutdown()
+	{
+		if (!$this->shutdownRegistered)
+		{
+			register_shutdown_function(array($this,'shutdownCommitClear'));
+			$this->shutdownRegistered = true;
+		}
+	}
+	
+	/**
+	 * @param String $id
+	 * @param Boolean $dispatch (optional)
+	 */
+	protected function clear($id = null, $dispatch = true)
+	{
+		$this->registerShutdown();
+		if ($id === null)
+		{
+			$this->clearAll = true;
+		}
+		else
+		{
+			$this->idToClear[$id] = true;
+		}
+		$this->dispatch = $dispatch || $this->dispatch;
+	}
+	
+	/**
+	 * @param Array $ids
+	 */
+	protected function commitClearDispatched($ids = null)
+	{
+		$this->registerShutdown();
+		if (Framework::isDebugEnabled())
+		{
+			Framework::debug("SimpleCache->commitClearDispatched");
+		}
+		if ($ids === null)
+		{
+			$this->clearAll = true;
+		}
+		else
+		{
+			$this->idToClear = $ids;
+		}
+		$this->dispatch = false;
+	}
+	
+	private function commitClear()
+	{
+		
+	}
+
+	/**
+	 * @param Array $docIds
+	 */
+	private function commitClearByDocIds($docIds)
+	{
+		
+	}
+	
+	/**
+	 * @param Array $dirsToClear
+	 */
+	private function buildInvalidCacheList($dirsToClear)
+	{
+		
+	}
 }
 ?>
\ No newline at end of file
diff --git a/listener/SimpleCacheListener.class.php b/listener/SimpleCacheListener.class.php
index 79396f6..6988400 100755
--- a/listener/SimpleCacheListener.class.php
+++ b/listener/SimpleCacheListener.class.php
@@ -8,21 +8,7 @@ class listener_SimpleCacheListener
 	{
 		if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentCreated");}
 		$document = $params['document'];
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-	}
-	
-	public function onPermissionsUpdated($sender, $params)
-	{
-	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPermissionsUpdated");}
-		$id = $params['nodeId'];
-		// For the moment, only a change in the front end permission changes
-		if (!is_null($id) && array_search('modules_website.AuthenticatedFrontUser', $params['updatedRoles']) !== false )
-		{
-			if (Framework::isDebugEnabled())
-			{
-				Framework::debug("[". __CLASS__ . "]: (Re-)Indexing  Permissioned descendents for treenode (id =" . $id . ")");
-			}
-		}
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
 	}
 	
 	/**
@@ -33,8 +19,8 @@ class listener_SimpleCacheListener
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentUpdated");}
 		$document = $params['document'];
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-		f_SimpleCache::clearCacheById($document->getId());
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 	
 	/**
@@ -44,7 +30,7 @@ class listener_SimpleCacheListener
 	public function onTagAdded ($sender, $params)
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: ontagAdded ".$params["tag"]);}
-		f_SimpleCache::clearCacheByTag($params["tag"]);
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getTagPattern($params["tag"]));
 	}
 	/**
 	 * @param TagService $sender
@@ -53,7 +39,7 @@ class listener_SimpleCacheListener
 	public function onTagRemoved ($sender, $params)
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: ontagRemoved ".$params["tag"]);}
-		f_SimpleCache::clearCacheByTag($params["tag"]);
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getTagPattern($params["tag"]));
 	}
 	/**
 	 * @param TagService $sender
@@ -62,7 +48,7 @@ class listener_SimpleCacheListener
 	public function onTagMoved ($sender, $params)
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: ontagMoved ".$params["tag"]);}
-		f_SimpleCache::clearCacheByTag($params["tag"]);
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getTagPattern($params["tag"]));
 	}
 
 	/**
@@ -72,9 +58,9 @@ class listener_SimpleCacheListener
 	public function onPersistentDocumentDeleted($sender, $params)
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentDeleted");}
-		$document = $params['document'];
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-		f_SimpleCache::clearCacheById($document->getId());
+		$document = $params['document'];
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -85,8 +71,8 @@ class listener_SimpleCacheListener
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentPublished");}
 		$document = $params['document'];
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-		f_SimpleCache::clearCacheById($document->getId());
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -97,8 +83,8 @@ class listener_SimpleCacheListener
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentDeactivated");}
 		$document = $params['document'];
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-		f_SimpleCache::clearCacheById($document->getId());
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -109,8 +95,8 @@ class listener_SimpleCacheListener
 	{
 		if (Framework::isDebugEnabled()) Framework::debug("[". __CLASS__ . "]: onPersistentDocumentUnPublished");
 		$document = $params['document'];
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-		f_SimpleCache::clearCacheById($document->getId());
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -121,8 +107,8 @@ class listener_SimpleCacheListener
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentFiled");}
 		$document = $params['document'];
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-		f_SimpleCache::clearCacheById($document->getId());
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -133,8 +119,8 @@ class listener_SimpleCacheListener
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentDocumentInTrash");}
 		$document = $params['document'];
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-		f_SimpleCache::clearCacheById($document->getId());
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 
 	/**
@@ -145,17 +131,17 @@ class listener_SimpleCacheListener
 	{
 	    if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onChildrenOrdered");}
 		$document = $params['parent'];
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-		f_SimpleCache::clearCacheById($document->getId());
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 	
 	public function onPersistentTreeNodeOrdered($sender, $params)
 	{
 		if (Framework::isDebugEnabled()) {Framework::debug("[". __CLASS__ . "]: onPersistentTreeNodeOrdered");}
 		$parentNode = $params['parentNode'];
-		$document = DocumentHelper::getDocumentInstance($parentNode->getId());
-		f_SimpleCache::clearCacheByModel($document->getPersistentModel());
-		f_SimpleCache::clearCacheById($document->getId());
+		$document = DocumentHelper::getDocumentInstance($parentNode->getId());
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getModelPattern($document->getDocumentModelName()));
+		f_DataCacheService::getInstance()->clearCacheByPattern(f_DataCachePatternHelper::getIdPattern($document->getId()));
 	}
 	
     public function onSimpleCacheClearedNode($sender, $params)
@@ -165,16 +151,16 @@ class listener_SimpleCacheListener
 		{
 			if (isset($params['ids']))
 			{
-		    	f_SimpleCache::commitClearDispatched($params['ids']);
+		    	f_DataCacheService::getInstance()->commitClearDispatched($params['ids']);
 			}
 			if (isset($params['docIds']))
 			{
-		    	f_SimpleCache::commitClearByDocIds($params['docIds']);
+		    	f_DataCacheService::getInstance()->commitClearByDocIds($params['docIds']);
 			}
 		}
 		else
 		{
-		    f_SimpleCache::commitClearDispatched();
+		    f_DataCacheService::getInstance()->commitClearDispatched();
 		}
     }
     
@@ -184,6 +170,6 @@ class listener_SimpleCacheListener
 	 */    
     public function onDayChange($sender, $params)
     {
-    	f_SimpleCache::cleanExpiredCache();
+    	f_DataCacheService::getInstance()->cleanExpiredCache();
     }
 }
-- 
1.7.0.4

