<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Licensed to the Apache Software Foundation (ASF) under one or more
	contributor license agreements.  See the NOTICE file distributed with
	this work for additional information regarding copyright ownership.
	The ASF licenses this file to You under the Apache License, Version 2.0
	(the "License"); you may not use this file except in compliance with
	the License.  You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<!-- WARNING: this is designed for SolR 1.4 -->
<config>
	<abortOnConfigurationError>${solr.abortOnConfigurationError:true}</abortOnConfigurationError>
	
	<dataDir>${solr.data.dir:./data}</dataDir>

	<indexDefaults>
		<!-- Values here affect all index writers and act as a default unless overridden. -->
		<useCompoundFile>false</useCompoundFile>
		<mergeFactor>${solr.mergefactor:10}</mergeFactor>
		<!-- Sets the amount of RAM that may be used by Lucene indexing
      		for buffering added documents and deletions before they are
      		flushed to the Directory.  -->
    	<ramBufferSizeMB>${solr.ramBufferSizeMB:32}</ramBufferSizeMB>
		<maxFieldLength>10000</maxFieldLength>
		<writeLockTimeout>1000</writeLockTimeout>
		<commitLockTimeout>10000</commitLockTimeout>
		<luceneAutoCommit>${solr.autocommit:false}</luceneAutoCommit>
		<lockType>native</lockType>
		<!-- If both ramBufferSizeMB and maxBufferedDocs is set, then Lucene will flush
     		based on whichever limit is hit first.  -->
    	<!--<maxBufferedDocs>1000</maxBufferedDocs>-->
	</indexDefaults>

	<mainIndex>
		<!-- options specific to the main on-disk lucene index -->
		<useCompoundFile>false</useCompoundFile>
		<mergeFactor>${solr.mergefactor:10}</mergeFactor>
		<maxFieldLength>10000</maxFieldLength>
		<!-- If true, unlock any held write or commit locks on startup. 
			This defeats the locking mechanism that allows multiple
			processes to safely access a lucene index, and should be
			used with care. -->
		<unlockOnStartup>${solr.unlockonstartup:false}</unlockOnStartup>
		<!-- If true, IndexReaders will be reopened (often more efficient) instead
         of closed and then opened.  -->
		<reopenReaders>true</reopenReaders>
	</mainIndex>

	<!-- the default high-performance update handler -->
	<updateHandler class="solr.DirectUpdateHandler2" />

	<query>
		<!-- Maximum number of clauses in a boolean query... can affect
			range or prefix queries that expand to big boolean
			queries.  An exception is thrown if exceeded.  -->
		<maxBooleanClauses>1024</maxBooleanClauses>


		<!-- Cache used by SolrIndexSearcher for filters (DocSets),
			unordered sets of *all* documents that match a query.
			When a new searcher is opened, its caches may be prepopulated
			or "autowarmed" using data from caches in the old searcher.
			autowarmCount is the number of items to prepopulate.  For LRUCache,
			the autowarmed items will be the most recently accessed items.
			Parameters:
			class - the SolrCache implementation (currently only LRUCache)
			size - the maximum number of entries in the cache
			initialSize - the initial capacity (number of entries) of
			the cache.  (seel java.util.HashMap)
			autowarmCount - the number of entries to prepopulate from
			and old cache.
		-->
		<filterCache class="solr.LRUCache" size="${solr.filterCacheSize:512}" initialSize="${solr.filterCacheInitialSize:512}" autowarmCount="${solr.filterCacheAutowarmCount:256}" />

		<!-- queryResultCache caches results of searches - ordered lists of
			document ids (DocList) based on a query, a sort, and the range
			of documents requested.  -->
		<queryResultCache class="solr.LRUCache" size="${solr.queryResultCacheSize:512}" initialSize="${solr.queryResultCacheInitialSize:512}" autowarmCount="${solr.queryResultCacheAutowarmCount:256}" />

		<!-- documentCache caches Lucene Document objects (the stored fields for each document).
			Since Lucene internal document ids are transient, this cache will not be autowarmed.  -->
		<documentCache class="solr.LRUCache" size="${solr.documentCacheSize:512}" initialSize="${solr.documentCacheInitialSize:256}" autowarmCount="${solr.documentCacheAutowarmCount:0}" />

		<!-- If true, stored fields that are not requested will be loaded lazily.
		-->
		<enableLazyFieldLoading>false</enableLazyFieldLoading>

		<!-- An optimization for use with the queryResultCache.  When a search
			is requested, a superset of the requested number of document ids
			are collected.  For example, if a search for a particular query
			requests matching documents 10 through 19, and queryWindowSize is 50,
			then documents 0 through 50 will be collected and cached.  Any further
			requests in that range can be satisfied via the cache.  -->
		<queryResultWindowSize>10</queryResultWindowSize>


		<!-- If a search request comes in and there is no current registered searcher,
         then immediately register the still warming searcher and use it.  If
         "false" then all requests will block until the first searcher is done
         warming. -->
		<useColdSearcher>false</useColdSearcher>

		<!-- Maximum number of searchers that may be warming in the background
			concurrently.  An error is returned if this limit is exceeded. Recommend
			1-2 for read-only slaves, higher for masters w/o cache warming. -->
		<maxWarmingSearchers>4</maxWarmingSearchers>

	</query>

	<!-- 
		Let the dispatch filter handler /select?qt=XXX
		handleSelect=true will use consistent error handling for /select and /update
		handleSelect=false will use solr1.1 style error formatting
	-->
	<requestDispatcher handleSelect="true">
		<!--Make sure your system has some authentication before enabling remote streaming!  -->
		<requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048" />
		
		 <httpCaching lastModifiedFrom="openTime"
                 etagSeed="Solr" />
	</requestDispatcher>


	<!-- requestHandler plugins... incoming queries will be dispatched to the
		correct handler based on the qt (query type) param matching the
		name of registered handlers.
		The "standard" request handler is the default and will be used if qt
		is not specified in the request.
	-->
	<requestHandler name="standard" class="solr.StandardRequestHandler">
		<!-- default values for query parameters -->
		<lst name="defaults">
			<str name="echoParams">explicit</str>
		</lst>
	</requestHandler>

	<!-- ***** BEGIN Change spellchecker definition ******* -->
	
	<!-- spellcheck de -->
    <searchComponent name="spellcheck_de" class="solr.SpellCheckComponent">
      <str name="queryAnalyzerFieldType">textSpell</str>
      <lst name="spellchecker">
        <str name="name">default</str>
        <str name="field">de_words</str>
        <str name="spellcheckIndexDir">./changespell_de</str>
        <!--
        <str name="buildOnCommit">true</str>
          -->
        <str name="buildOnOptimize">true</str>
      </lst>
    </searchComponent>
    
    <requestHandler name="/spellchecker_de" class="solr.SearchHandler" lazy="true">
	    <lst name="defaults">
	      <!-- omp = Only More Popular -->
	      <str name="spellcheck.onlyMorePopular">false</str>
	      <!-- exr = Extended Results -->
	      <str name="spellcheck.extendedResults">false</str>
	      <!--  The number of suggestions to return -->
	      <str name="spellcheck.count">1</str>
	    </lst>
	    <arr name="last-components">
	      <str>spellcheck_de</str>
	    </arr>
  	</requestHandler>
  
	<!-- spellcheck en -->
    <searchComponent name="spellcheck_en" class="solr.SpellCheckComponent">
      <str name="queryAnalyzerFieldType">textSpell</str>
      <lst name="spellchecker">
        <str name="name">default</str>
        <str name="field">en_words</str>
        <str name="spellcheckIndexDir">./changespell_en</str>
        <!--
        <str name="buildOnCommit">true</str>
          -->
        <str name="buildOnOptimize">true</str>
      </lst>
    </searchComponent>
    
    <requestHandler name="/spellchecker_en" class="solr.SearchHandler" lazy="true">
	    <lst name="defaults">
	      <!-- omp = Only More Popular -->
	      <str name="spellcheck.onlyMorePopular">false</str>
	      <!-- exr = Extended Results -->
	      <str name="spellcheck.extendedResults">false</str>
	      <!--  The number of suggestions to return -->
	      <str name="spellcheck.count">1</str>
	    </lst>
	    <arr name="last-components">
	      <str>spellcheck_en</str>
	    </arr>
  	</requestHandler>
  	
  	<!-- spellcheck es -->
    <searchComponent name="spellcheck_es" class="solr.SpellCheckComponent">
      <str name="queryAnalyzerFieldType">textSpell</str>
      <lst name="spellchecker">
        <str name="name">default</str>
        <str name="field">es_words</str>
        <str name="spellcheckIndexDir">./changespell_es</str>
        <!--
        <str name="buildOnCommit">true</str>
          -->
        <str name="buildOnOptimize">true</str>
      </lst>
    </searchComponent>
    
    <requestHandler name="/spellchecker_es" class="solr.SearchHandler" lazy="true">
	    <lst name="defaults">
	      <!-- omp = Only More Popular -->
	      <str name="spellcheck.onlyMorePopular">false</str>
	      <!-- exr = Extended Results -->
	      <str name="spellcheck.extendedResults">false</str>
	      <!--  The number of suggestions to return -->
	      <str name="spellcheck.count">1</str>
	    </lst>
	    <arr name="last-components">
	      <str>spellcheck_es</str>
	    </arr>
  	</requestHandler>
    
    <!-- spellcheck fr -->
    <searchComponent name="spellcheck_fr" class="solr.SpellCheckComponent">
      <str name="queryAnalyzerFieldType">textSpell</str>
      <lst name="spellchecker">
        <str name="name">default</str>
        <str name="field">fr_words</str>
        <str name="spellcheckIndexDir">./changespell_fr</str>
        <!--
        <str name="buildOnCommit">true</str>
          -->
        <str name="buildOnOptimize">true</str>
      </lst>
    </searchComponent>
    
    <requestHandler name="/spellchecker_fr" class="solr.SearchHandler" lazy="true">
	    <lst name="defaults">
	      <!-- omp = Only More Popular -->
	      <str name="spellcheck.onlyMorePopular">false</str>
	      <!-- exr = Extended Results -->
	      <str name="spellcheck.extendedResults">false</str>
	      <!--  The number of suggestions to return -->
	      <str name="spellcheck.count">1</str>
	    </lst>
	    <arr name="last-components">
	      <str>spellcheck_fr</str>
	    </arr>
  	</requestHandler>
    
    <!-- spellcheck it -->
    <searchComponent name="spellcheck_it" class="solr.SpellCheckComponent">
      <str name="queryAnalyzerFieldType">textSpell</str>
      <lst name="spellchecker">
        <str name="name">default</str>
        <str name="field">it_words</str>
        <str name="spellcheckIndexDir">./changespell_it</str>
        <!--
        <str name="buildOnCommit">true</str>
          -->
        <str name="buildOnOptimize">true</str>
      </lst>
    </searchComponent>
    
    <requestHandler name="/spellchecker_it" class="solr.SearchHandler" lazy="true">
	    <lst name="defaults">
	      <!-- omp = Only More Popular -->
	      <str name="spellcheck.onlyMorePopular">false</str>
	      <!-- exr = Extended Results -->
	      <str name="spellcheck.extendedResults">false</str>
	      <!--  The number of suggestions to return -->
	      <str name="spellcheck.count">1</str>
	    </lst>
	    <arr name="last-components">
	      <str>spellcheck_it</str>
	    </arr>
  	</requestHandler>
    
    <!-- spellcheck nl -->
    <searchComponent name="spellcheck_nl" class="solr.SpellCheckComponent">
      <str name="queryAnalyzerFieldType">textSpell</str>
      <lst name="spellchecker">
        <str name="name">default</str>
        <str name="field">nl_words</str>
        <str name="spellcheckIndexDir">./changespell_nl</str>
        <!--
        <str name="buildOnCommit">true</str>
          -->
        <str name="buildOnOptimize">true</str>
      </lst>
    </searchComponent>
    
    <requestHandler name="/spellchecker_nl" class="solr.SearchHandler" lazy="true">
	    <lst name="defaults">
	      <!-- omp = Only More Popular -->
	      <str name="spellcheck.onlyMorePopular">false</str>
	      <!-- exr = Extended Results -->
	      <str name="spellcheck.extendedResults">false</str>
	      <!--  The number of suggestions to return -->
	      <str name="spellcheck.count">1</str>
	    </lst>
	    <arr name="last-components">
	      <str>spellcheck_nl</str>
	    </arr>
  	</requestHandler>
    
    <!-- spellcheck pt -->
    <searchComponent name="spellcheck_pt" class="solr.SpellCheckComponent">
      <str name="queryAnalyzerFieldType">textSpell</str>
      <lst name="spellchecker">
        <str name="name">default</str>
        <str name="field">pt_words</str>
        <str name="spellcheckIndexDir">./changespell_pt</str>
        <!--
        <str name="buildOnCommit">true</str>
          -->
        <str name="buildOnOptimize">true</str>
      </lst>
    </searchComponent>
    
    <requestHandler name="/spellchecker_pt" class="solr.SearchHandler" lazy="true">
	    <lst name="defaults">
	      <!-- omp = Only More Popular -->
	      <str name="spellcheck.onlyMorePopular">false</str>
	      <!-- exr = Extended Results -->
	      <str name="spellcheck.extendedResults">false</str>
	      <!--  The number of suggestions to return -->
	      <str name="spellcheck.count">1</str>
	    </lst>
	    <arr name="last-components">
	      <str>spellcheck_pt</str>
	    </arr>
  	</requestHandler>
    
	<!-- ***** END Change spellchecker definition ******* -->

	<searchComponent name="termsComponent" class="org.apache.solr.handler.component.TermsComponent"/>

	<requestHandler name="/terms"
		class="org.apache.solr.handler.component.SearchHandler">
		<lst name="defaults">
			<bool name="terms">true</bool>
		</lst>
		<arr name="components">
			<str>termsComponent</str>
		</arr>
	</requestHandler>

	<requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />

	<requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers" />
	
  	<!-- ping/healthcheck -->
  	<requestHandler name="/admin/ping" class="PingRequestHandler">
   	 <lst name="defaults">
   	   <str name="qt">standard</str>
   	   <str name="q">solrpingquery</str>
   	   <str name="echoParams">all</str>
   	 </lst>
  	</requestHandler>

	<!-- Echo the request contents back to the client -->
	<requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
   	 <lst name="defaults">
   	  <str name="echoParams">explicit</str> <!-- for all params (including the default etc) use: 'all' -->
   	  <str name="echoHandler">true</str>
   	 </lst>
  	</requestHandler>

	<!-- config for the admin interface -->
	<admin>
		<defaultQuery>aggregateText:change</defaultQuery>
		<gettableFiles>solrconfig.xml schema.xml</gettableFiles>
	</admin>

</config>